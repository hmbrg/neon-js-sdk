// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import type { BaseHttpRequest } from './core/BaseHttpRequest';
import type { ListApiKeysResponse, CreateApiKeyData, CreateApiKeyResponse, RevokeApiKeyData, RevokeApiKeyResponse, GetProjectOperationData, GetProjectOperationResponse, ListProjectOperationsData, ListProjectOperationsResponse, ListProjectsData, ListProjectsResponse, CreateProjectData, CreateProjectResponse, ListSharedProjectsData, ListSharedProjectsResponse, GetProjectData, GetProjectResponse, UpdateProjectData, UpdateProjectResponse, DeleteProjectData, DeleteProjectResponse, ListProjectPermissionsData, ListProjectPermissionsResponse, GrantPermissionToProjectData, GrantPermissionToProjectResponse, RevokePermissionFromProjectData, RevokePermissionFromProjectResponse, GetConnectionUriData, GetConnectionUriResponse, CreateProjectBranchData, CreateProjectBranchResponse, ListProjectBranchesData, ListProjectBranchesResponse, GetProjectBranchData, GetProjectBranchResponse, DeleteProjectBranchData, DeleteProjectBranchResponse, UpdateProjectBranchData, UpdateProjectBranchResponse, RestoreProjectBranchData, RestoreProjectBranchResponse, GetProjectBranchSchemaData, GetProjectBranchSchemaResponse, SetPrimaryProjectBranchData, SetPrimaryProjectBranchResponse, SetDefaultProjectBranchData, SetDefaultProjectBranchResponse, ListProjectBranchEndpointsData, ListProjectBranchEndpointsResponse, ListProjectBranchDatabasesData, ListProjectBranchDatabasesResponse, CreateProjectBranchDatabaseData, CreateProjectBranchDatabaseResponse, GetProjectBranchDatabaseData, GetProjectBranchDatabaseResponse, UpdateProjectBranchDatabaseData, UpdateProjectBranchDatabaseResponse, DeleteProjectBranchDatabaseData, DeleteProjectBranchDatabaseResponse, ListProjectBranchRolesData, ListProjectBranchRolesResponse, CreateProjectBranchRoleData, CreateProjectBranchRoleResponse, GetProjectBranchRoleData, GetProjectBranchRoleResponse, DeleteProjectBranchRoleData, DeleteProjectBranchRoleResponse, GetProjectBranchRolePasswordData, GetProjectBranchRolePasswordResponse, ResetProjectBranchRolePasswordData, ResetProjectBranchRolePasswordResponse, CreateProjectEndpointData, CreateProjectEndpointResponse, ListProjectEndpointsData, ListProjectEndpointsResponse, GetProjectEndpointData, GetProjectEndpointResponse, DeleteProjectEndpointData, DeleteProjectEndpointResponse, UpdateProjectEndpointData, UpdateProjectEndpointResponse, StartProjectEndpointData, StartProjectEndpointResponse, SuspendProjectEndpointData, SuspendProjectEndpointResponse, RestartProjectEndpointData, RestartProjectEndpointResponse, GetConsumptionHistoryPerAccountData, GetConsumptionHistoryPerAccountResponse, GetConsumptionHistoryPerProjectData, GetConsumptionHistoryPerProjectResponse, ListProjectsConsumptionData, ListProjectsConsumptionResponse, GetCurrentUserInfoResponse, GetCurrentUserOrganizationsResponse } from './types.gen';

export class ApiKeyService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get a list of API keys
     * Retrieves the API keys for your Neon account.
     * The response does not include API key tokens. A token is only provided when creating an API key.
     * API keys can also be managed in the Neon Console.
     * For more information, see [Manage API keys](https://neon.tech/docs/manage/api-keys/).
     *
     * @returns ApiKeysListResponseItem Returned the API keys for the Neon account
     * @throws ApiError
     */
    public listApiKeys(): CancelablePromise<ListApiKeysResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api_keys',
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * Create an API key
     * Creates an API key.
     * The `key_name` is a user-specified name for the key.
     * This method returns an `id` and `key`. The `key` is a randomly generated, 64-bit token required to access the Neon API.
     * API keys can also be managed in the Neon Console.
     * See [Manage API keys](https://neon.tech/docs/manage/api-keys/).
     *
     * @param data The data for the request.
     * @param data.requestBody
     * @returns ApiKeyCreateResponse Created an API key
     * @throws ApiError
     */
    public createApiKey(data: CreateApiKeyData): CancelablePromise<CreateApiKeyResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api_keys',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * Revoke an API key
     * Revokes the specified API key.
     * An API key that is no longer needed can be revoked.
     * This action cannot be reversed.
     * You can obtain `key_id` values by listing the API keys for your Neon account.
     * API keys can also be managed in the Neon Console.
     * See [Manage API keys](https://neon.tech/docs/manage/api-keys/).
     *
     * @param data The data for the request.
     * @param data.keyId The API key ID
     * @returns ApiKeyRevokeResponse Revoked the specified API key
     * @throws ApiError
     */
    public revokeApiKey(data: RevokeApiKeyData): CancelablePromise<RevokeApiKeyResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api_keys/{key_id}',
            path: {
                key_id: data.keyId
            },
            errors: {
                default: 'General Error'
            }
        });
    }
    
}

export class OperationService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get operation details
     * Retrieves details for the specified operation.
     * An operation is an action performed on a Neon project resource.
     * You can obtain a `project_id` by listing the projects for your Neon account.
     * You can obtain a `operation_id` by listing operations for the project.
     *
     * @param data The data for the request.
     * @param data.projectId The Neon project ID
     * @param data.operationId The operation ID
     * @returns OperationResponse Returned details for the specified operation
     * @throws ApiError
     */
    public getProjectOperation(data: GetProjectOperationData): CancelablePromise<GetProjectOperationResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/projects/{project_id}/operations/{operation_id}',
            path: {
                project_id: data.projectId,
                operation_id: data.operationId
            },
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * Get a list of operations
     * Retrieves a list of operations for the specified Neon project.
     * You can obtain a `project_id` by listing the projects for your Neon account.
     * The number of operations returned can be large.
     * To paginate the response, issue an initial request with a `limit` value.
     * Then, add the `cursor` value that was returned in the response to the next request.
     *
     * @param data The data for the request.
     * @param data.projectId The Neon project ID
     * @param data.cursor Specify the cursor value from the previous response to get the next batch of operations
     * @param data.limit Specify a value from 1 to 1000 to limit number of operations in the response
     * @returns unknown Returned a list of operations
     *
     * @throws ApiError
     */
    public listProjectOperations(data: ListProjectOperationsData): CancelablePromise<ListProjectOperationsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/projects/{project_id}/operations',
            path: {
                project_id: data.projectId
            },
            query: {
                cursor: data.cursor,
                limit: data.limit
            },
            errors: {
                default: 'General Error'
            }
        });
    }
    
}

export class ProjectService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get a list of projects
     * Retrieves a list of projects for the Neon account.
     * A project is the top-level object in the Neon object hierarchy.
     * For more information, see [Manage projects](https://neon.tech/docs/manage/projects/).
     *
     * @param data The data for the request.
     * @param data.cursor Specify the cursor value from the previous response to retrieve the next batch of projects.
     * @param data.limit Specify a value from 1 to 400 to limit number of projects in the response.
     * @param data.search Search by project `name` or `id`. You can specify partial `name` or `id` values to filter results.
     * @param data.orgId Search for projects by `org_id`.
     * @returns unknown Returned a list of projects for the Neon account
     * @throws ApiError
     */
    public listProjects(data: ListProjectsData = {}): CancelablePromise<ListProjectsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/projects',
            query: {
                cursor: data.cursor,
                limit: data.limit,
                search: data.search,
                org_id: data.orgId
            },
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * Create a project
     * Creates a Neon project.
     * A project is the top-level object in the Neon object hierarchy.
     * Plan limits define how many projects you can create.
     * Neon's Free plan permits one project per Neon account.
     * For more information, see [Manage projects](https://neon.tech/docs/manage/projects/).
     *
     * You can specify a region and Postgres version in the request body.
     * Neon currently supports PostgreSQL 14, 15, and 16.
     * For supported regions and `region_id` values, see [Regions](https://neon.tech/docs/introduction/regions/).
     *
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown Created a project.
     * The project includes a connection URI with a database, password, and role.
     * At least one non-protected role is created with a password.
     * Wait until the operations are finished before attempting to connect to a project database.
     *
     * @throws ApiError
     */
    public createProject(data: CreateProjectData): CancelablePromise<CreateProjectResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/projects',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * Get a list of shared projects
     * Retrieves a list of shared projects for the Neon account.
     * A project is the top-level object in the Neon object hierarchy.
     * For more information, see [Manage projects](https://neon.tech/docs/manage/projects/).
     *
     * @param data The data for the request.
     * @param data.cursor Specify the cursor value from the previous response to get the next batch of projects.
     * @param data.limit Specify a value from 1 to 400 to limit number of projects in the response.
     * @param data.search Search query by name or id.
     * @returns unknown Returned a list of shared projects for the Neon account
     * @throws ApiError
     */
    public listSharedProjects(data: ListSharedProjectsData = {}): CancelablePromise<ListSharedProjectsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/projects/shared',
            query: {
                cursor: data.cursor,
                limit: data.limit,
                search: data.search
            },
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * Get project details
     * Retrieves information about the specified project.
     * A project is the top-level object in the Neon object hierarchy.
     * You can obtain a `project_id` by listing the projects for your Neon account.
     *
     * @param data The data for the request.
     * @param data.projectId The Neon project ID
     * @returns ProjectResponse Returned information about the specified project
     * @throws ApiError
     */
    public getProject(data: GetProjectData): CancelablePromise<GetProjectResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/projects/{project_id}',
            path: {
                project_id: data.projectId
            },
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * Update a project
     * Updates the specified project.
     * You can obtain a `project_id` by listing the projects for your Neon account.
     * Neon permits updating the project name only.
     *
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.projectId The Neon project ID
     * @returns unknown Updated the specified project
     * @throws ApiError
     */
    public updateProject(data: UpdateProjectData): CancelablePromise<UpdateProjectResponse> {
        return this.httpRequest.request({
            method: 'PATCH',
            url: '/projects/{project_id}',
            path: {
                project_id: data.projectId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * Delete a project
     * Deletes the specified project.
     * You can obtain a `project_id` by listing the projects for your Neon account.
     * Deleting a project is a permanent action.
     * Deleting a project also deletes endpoints, branches, databases, and users that belong to the project.
     *
     * @param data The data for the request.
     * @param data.projectId The Neon project ID
     * @returns ProjectResponse Deleted the specified project
     * @throws ApiError
     */
    public deleteProject(data: DeleteProjectData): CancelablePromise<DeleteProjectResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/projects/{project_id}',
            path: {
                project_id: data.projectId
            },
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * List project access
     * Retrieves details about users who have access to the project, including the permission `id`, the granted-to email address, and the date project access was granted.
     * @param data The data for the request.
     * @param data.projectId
     * @returns ProjectPermissions Returned project access details
     * @throws ApiError
     */
    public listProjectPermissions(data: ListProjectPermissionsData): CancelablePromise<ListProjectPermissionsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/projects/{project_id}/permissions',
            path: {
                project_id: data.projectId
            },
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * Grant project access
     * Grants project access to the account associated with the specified email address
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.projectId
     * @returns ProjectPermission Granted project access
     * @throws ApiError
     */
    public grantPermissionToProject(data: GrantPermissionToProjectData): CancelablePromise<GrantPermissionToProjectResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/projects/{project_id}/permissions',
            path: {
                project_id: data.projectId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * Revoke project access
     * Revokes project access from the user associted with the specified permisison `id`. You can retrieve a user's permission `id` by listing project access.
     * @param data The data for the request.
     * @param data.projectId
     * @param data.permissionId
     * @returns ProjectPermission Revoked project access
     * @throws ApiError
     */
    public revokePermissionFromProject(data: RevokePermissionFromProjectData): CancelablePromise<RevokePermissionFromProjectResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/projects/{project_id}/permissions/{permission_id}',
            path: {
                project_id: data.projectId,
                permission_id: data.permissionId
            },
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * Get a connection URI
     * Retrieves a connection URI for the specified database.
     * You can obtain a `project_id` by listing the projects for your Neon account.
     * You can obtain the `database_name` by listing the databases for a branch.
     * You can obtain a `role_name` by listing the roles for a branch.
     *
     * @param data The data for the request.
     * @param data.projectId The Neon project ID
     * @param data.databaseName The database name
     * @param data.roleName The role name
     * @param data.branchId The branch ID. Defaults to your project's primary `branch_id` if not specified.
     * @param data.endpointId The endpoint ID. Defaults to the read-write `endpoint_id` associated with the `branch_id` if not specified.
     * @param data.pooled Adds the `-pooler` option to the connection URI when set to `true`, creating a pooled connection URI.
     * @returns ConnectionURIResponse Returned the connection URI
     * @throws ApiError
     */
    public getConnectionUri(data: GetConnectionUriData): CancelablePromise<GetConnectionUriResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/projects/{project_id}/connection_uri',
            path: {
                project_id: data.projectId
            },
            query: {
                branch_id: data.branchId,
                endpoint_id: data.endpointId,
                database_name: data.databaseName,
                role_name: data.roleName,
                pooled: data.pooled
            },
            errors: {
                default: 'General Error'
            }
        });
    }
    
}

export class BranchService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Create a branch
     * Creates a branch in the specified project.
     * You can obtain a `project_id` by listing the projects for your Neon account.
     *
     * This method does not require a request body, but you can specify one to create a compute endpoint for the branch or to select a non-default parent branch.
     * The default behavior is to create a branch from the project's primary branch with no compute endpoint, and the branch name is auto-generated.
     * There is a maximum of one read-write endpoint per branch.
     * A branch can have multiple read-only endpoints.
     * For related information, see [Manage branches](https://neon.tech/docs/manage/branches/).
     *
     * @param data The data for the request.
     * @param data.projectId The Neon project ID
     * @param data.requestBody
     * @returns unknown Created a branch. An endpoint is only created if it was specified in the request.
     * @throws ApiError
     */
    public createProjectBranch(data: CreateProjectBranchData): CancelablePromise<CreateProjectBranchResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/projects/{project_id}/branches',
            path: {
                project_id: data.projectId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * Get a list of branches
     * Retrieves a list of branches for the specified project.
     * You can obtain a `project_id` by listing the projects for your Neon account.
     *
     * Each Neon project has a root branch named `main`.
     * A `branch_id` value has a `br-` prefix.
     * A project may contain child branches that were branched from `main` or from another branch.
     * A parent branch is identified by the `parent_id` value, which is the `id` of the parent branch.
     * For related information, see [Manage branches](https://neon.tech/docs/manage/branches/).
     *
     * @param data The data for the request.
     * @param data.projectId The Neon project ID
     * @returns BranchesResponse Returned a list of branches for the specified project
     * @throws ApiError
     */
    public listProjectBranches(data: ListProjectBranchesData): CancelablePromise<ListProjectBranchesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/projects/{project_id}/branches',
            path: {
                project_id: data.projectId
            },
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * Get branch details
     * Retrieves information about the specified branch.
     * You can obtain a `project_id` by listing the projects for your Neon account.
     * You can obtain a `branch_id` by listing the project's branches.
     * A `branch_id` value has a `br-` prefix.
     *
     * Each Neon project is initially created with a root and primary branch named `main`.
     * A project can contain one or more branches.
     * A parent branch is identified by a `parent_id` value, which is the `id` of the parent branch.
     * For related information, see [Manage branches](https://neon.tech/docs/manage/branches/).
     *
     * @param data The data for the request.
     * @param data.projectId The Neon project ID
     * @param data.branchId The branch ID
     * @returns BranchResponse Returned information about the specified branch
     * @throws ApiError
     */
    public getProjectBranch(data: GetProjectBranchData): CancelablePromise<GetProjectBranchResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/projects/{project_id}/branches/{branch_id}',
            path: {
                project_id: data.projectId,
                branch_id: data.branchId
            },
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * Delete a branch
     * Deletes the specified branch from a project, and places
     * all compute endpoints into an idle state, breaking existing client connections.
     * You can obtain a `project_id` by listing the projects for your Neon account.
     * You can obtain a `branch_id` by listing the project's branches.
     * For related information, see [Manage branches](https://neon.tech/docs/manage/branches/).
     *
     * When a successful response status is received, the compute endpoints are still active,
     * and the branch is not yet deleted from storage.
     * The deletion occurs after all operations finish.
     * You cannot delete a project's root or primary branch, and you cannot delete a branch that has a child branch.
     * A project must have at least one branch.
     *
     * @param data The data for the request.
     * @param data.projectId The Neon project ID
     * @param data.branchId The branch ID
     * @returns BranchOperations Deleted the specified branch
     * @throws ApiError
     */
    public deleteProjectBranch(data: DeleteProjectBranchData): CancelablePromise<DeleteProjectBranchResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/projects/{project_id}/branches/{branch_id}',
            path: {
                project_id: data.projectId,
                branch_id: data.branchId
            },
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * Update a branch
     * Updates the specified branch.
     * You can obtain a `project_id` by listing the projects for your Neon account.
     * You can obtain the `branch_id` by listing the project's branches.
     * For more information, see [Manage branches](https://neon.tech/docs/manage/branches/).
     *
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.projectId The Neon project ID
     * @param data.branchId The branch ID
     * @returns BranchOperations Updated the specified branch
     * @throws ApiError
     */
    public updateProjectBranch(data: UpdateProjectBranchData): CancelablePromise<UpdateProjectBranchResponse> {
        return this.httpRequest.request({
            method: 'PATCH',
            url: '/projects/{project_id}/branches/{branch_id}',
            path: {
                project_id: data.projectId,
                branch_id: data.branchId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * Restore a branch
     * Restores a branch to an earlier state in its own or another branch's history
     * @param data The data for the request.
     * @param data.projectId The Neon project ID
     * @param data.branchId The branch ID
     * @param data.requestBody
     * @returns BranchOperations Updated the specified branch
     * @throws ApiError
     */
    public restoreProjectBranch(data: RestoreProjectBranchData): CancelablePromise<RestoreProjectBranchResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/projects/{project_id}/branches/{branch_id}/restore',
            path: {
                project_id: data.projectId,
                branch_id: data.branchId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * Get the database schema
     * Retrieves the schema from the specified database. The `lsn` and `timestamp` values cannot be specified at the same time. If both are omitted, the database schema is retrieved from database's head .
     * @param data The data for the request.
     * @param data.projectId The Neon project ID
     * @param data.branchId The branch ID
     * @param data.role The role on whose behalf the schema is retrieved
     * @param data.dbName Name of the database for which the schema is retrieved
     * @param data.lsn The Log Sequence Number (LSN) for which the schema is retrieved
     *
     * @param data.timestamp The point in time for which the schema is retrieved
     *
     * @returns BranchSchemaResponse Schema definition
     * @throws ApiError
     */
    public getProjectBranchSchema(data: GetProjectBranchSchemaData): CancelablePromise<GetProjectBranchSchemaResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/projects/{project_id}/branches/{branch_id}/schema',
            path: {
                project_id: data.projectId,
                branch_id: data.branchId
            },
            query: {
                role: data.role,
                db_name: data.dbName,
                lsn: data.lsn,
                timestamp: data.timestamp
            },
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * Set branch as primary
     * Sets the specified branch as the project's primary branch.
     * The primary designation is automatically removed from the previous primary branch.
     * You can obtain a `project_id` by listing the projects for your Neon account.
     * You can obtain the `branch_id` by listing the project's branches.
     * For more information, see [Manage branches](https://neon.tech/docs/manage/branches/).
     *
     * @param data The data for the request.
     * @param data.projectId The Neon project ID
     * @param data.branchId The branch ID
     * @returns BranchOperations Updated the specified branch
     * @throws ApiError
     */
    public setPrimaryProjectBranch(data: SetPrimaryProjectBranchData): CancelablePromise<SetPrimaryProjectBranchResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/projects/{project_id}/branches/{branch_id}/set_as_primary',
            path: {
                project_id: data.projectId,
                branch_id: data.branchId
            },
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * Set branch as default
     * Sets the specified branch as the project's default branch.
     * The default designation is automatically removed from the previous default branch.
     * You can obtain a `project_id` by listing the projects for your Neon account.
     * You can obtain the `branch_id` by listing the project's branches.
     * For more information, see [Manage branches](https://neon.tech/docs/manage/branches/).
     *
     * @param data The data for the request.
     * @param data.projectId The Neon project ID
     * @param data.branchId The branch ID
     * @returns BranchOperations Updated the specified branch
     * @throws ApiError
     */
    public setDefaultProjectBranch(data: SetDefaultProjectBranchData): CancelablePromise<SetDefaultProjectBranchResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/projects/{project_id}/branches/{branch_id}/set_as_default',
            path: {
                project_id: data.projectId,
                branch_id: data.branchId
            },
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * Get a list of branch endpoints
     * Retrieves a list of compute endpoints for the specified branch.
     * Neon permits only one read-write compute endpoint per branch.
     * A branch can have multiple read-only compute endpoints.
     * You can obtain a `project_id` by listing the projects for your Neon account.
     * You can obtain the `branch_id` by listing the project's branches.
     *
     * @param data The data for the request.
     * @param data.projectId The Neon project ID
     * @param data.branchId The branch ID
     * @returns EndpointsResponse Returned a list of endpoints for the specified branch
     * @throws ApiError
     */
    public listProjectBranchEndpoints(data: ListProjectBranchEndpointsData): CancelablePromise<ListProjectBranchEndpointsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/projects/{project_id}/branches/{branch_id}/endpoints',
            path: {
                project_id: data.projectId,
                branch_id: data.branchId
            },
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * Get a list of databases
     * Retrieves a list of databases for the specified branch.
     * A branch can have multiple databases.
     * You can obtain a `project_id` by listing the projects for your Neon account.
     * You can obtain the `branch_id` by listing the project's branches.
     * For related information, see [Manage databases](https://neon.tech/docs/manage/databases/).
     *
     * @param data The data for the request.
     * @param data.projectId The Neon project ID
     * @param data.branchId The branch ID
     * @returns DatabasesResponse Returned a list of databases of the specified branch
     * @throws ApiError
     */
    public listProjectBranchDatabases(data: ListProjectBranchDatabasesData): CancelablePromise<ListProjectBranchDatabasesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/projects/{project_id}/branches/{branch_id}/databases',
            path: {
                project_id: data.projectId,
                branch_id: data.branchId
            },
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * Create a database
     * Creates a database in the specified branch.
     * A branch can have multiple databases.
     * You can obtain a `project_id` by listing the projects for your Neon account.
     * You can obtain the `branch_id` by listing the project's branches.
     * For related information, see [Manage databases](https://neon.tech/docs/manage/databases/).
     *
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.projectId The Neon project ID
     * @param data.branchId The branch ID
     * @returns DatabaseOperations Created a database in the specified branch
     * @throws ApiError
     */
    public createProjectBranchDatabase(data: CreateProjectBranchDatabaseData): CancelablePromise<CreateProjectBranchDatabaseResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/projects/{project_id}/branches/{branch_id}/databases',
            path: {
                project_id: data.projectId,
                branch_id: data.branchId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * Get database details
     * Retrieves information about the specified database.
     * You can obtain a `project_id` by listing the projects for your Neon account.
     * You can obtain the `branch_id` and `database_name` by listing the branch's databases.
     * For related information, see [Manage databases](https://neon.tech/docs/manage/databases/).
     *
     * @param data The data for the request.
     * @param data.projectId The Neon project ID
     * @param data.branchId The branch ID
     * @param data.databaseName The database name
     * @returns DatabaseResponse Returned the database details
     * @throws ApiError
     */
    public getProjectBranchDatabase(data: GetProjectBranchDatabaseData): CancelablePromise<GetProjectBranchDatabaseResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/projects/{project_id}/branches/{branch_id}/databases/{database_name}',
            path: {
                project_id: data.projectId,
                branch_id: data.branchId,
                database_name: data.databaseName
            },
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * Update a database
     * Updates the specified database in the branch.
     * You can obtain a `project_id` by listing the projects for your Neon account.
     * You can obtain the `branch_id` and `database_name` by listing the branch's databases.
     * For related information, see [Manage databases](https://neon.tech/docs/manage/databases/).
     *
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.projectId The Neon project ID
     * @param data.branchId The branch ID
     * @param data.databaseName The database name
     * @returns DatabaseOperations Updated the database
     * @throws ApiError
     */
    public updateProjectBranchDatabase(data: UpdateProjectBranchDatabaseData): CancelablePromise<UpdateProjectBranchDatabaseResponse> {
        return this.httpRequest.request({
            method: 'PATCH',
            url: '/projects/{project_id}/branches/{branch_id}/databases/{database_name}',
            path: {
                project_id: data.projectId,
                branch_id: data.branchId,
                database_name: data.databaseName
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * Delete a database
     * Deletes the specified database from the branch.
     * You can obtain a `project_id` by listing the projects for your Neon account.
     * You can obtain the `branch_id` and `database_name` by listing the branch's databases.
     * For related information, see [Manage databases](https://neon.tech/docs/manage/databases/).
     *
     * @param data The data for the request.
     * @param data.projectId The Neon project ID
     * @param data.branchId The branch ID
     * @param data.databaseName The database name
     * @returns DatabaseOperations Deleted the specified database
     * @throws ApiError
     */
    public deleteProjectBranchDatabase(data: DeleteProjectBranchDatabaseData): CancelablePromise<DeleteProjectBranchDatabaseResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/projects/{project_id}/branches/{branch_id}/databases/{database_name}',
            path: {
                project_id: data.projectId,
                branch_id: data.branchId,
                database_name: data.databaseName
            },
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * Get a list of roles
     * Retrieves a list of Postgres roles from the specified branch.
     * You can obtain a `project_id` by listing the projects for your Neon account.
     * You can obtain the `branch_id` by listing the project's branches.
     * For related information, see [Manage roles](https://neon.tech/docs/manage/roles/).
     *
     * @param data The data for the request.
     * @param data.projectId The Neon project ID
     * @param data.branchId The branch ID
     * @returns RolesResponse Returned a list of roles from the specified branch.
     * @throws ApiError
     */
    public listProjectBranchRoles(data: ListProjectBranchRolesData): CancelablePromise<ListProjectBranchRolesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/projects/{project_id}/branches/{branch_id}/roles',
            path: {
                project_id: data.projectId,
                branch_id: data.branchId
            },
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * Create a role
     * Creates a Postgres role in the specified branch.
     * You can obtain a `project_id` by listing the projects for your Neon account.
     * You can obtain the `branch_id` by listing the project's branches.
     * For related information, see [Manage roles](https://neon.tech/docs/manage/roles/).
     *
     * Connections established to the active compute endpoint will be dropped.
     * If the compute endpoint is idle, the endpoint becomes active for a short period of time and is suspended afterward.
     *
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.projectId The Neon project ID
     * @param data.branchId The branch ID
     * @returns RoleOperations Created a role in the specified branch
     * @throws ApiError
     */
    public createProjectBranchRole(data: CreateProjectBranchRoleData): CancelablePromise<CreateProjectBranchRoleResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/projects/{project_id}/branches/{branch_id}/roles',
            path: {
                project_id: data.projectId,
                branch_id: data.branchId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * Get role details
     * Retrieves details about the specified role.
     * You can obtain a `project_id` by listing the projects for your Neon account.
     * You can obtain the `branch_id` by listing the project's branches.
     * You can obtain the `role_name` by listing the roles for a branch.
     * In Neon, the terms "role" and "user" are synonymous.
     * For related information, see [Manage roles](https://neon.tech/docs/manage/roles/).
     *
     * @param data The data for the request.
     * @param data.projectId The Neon project ID
     * @param data.branchId The branch ID
     * @param data.roleName The role name
     * @returns RoleResponse Returned details for the specified role
     * @throws ApiError
     */
    public getProjectBranchRole(data: GetProjectBranchRoleData): CancelablePromise<GetProjectBranchRoleResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/projects/{project_id}/branches/{branch_id}/roles/{role_name}',
            path: {
                project_id: data.projectId,
                branch_id: data.branchId,
                role_name: data.roleName
            },
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * Delete a role
     * Deletes the specified Postgres role from the branch.
     * You can obtain a `project_id` by listing the projects for your Neon account.
     * You can obtain the `branch_id` by listing the project's branches.
     * You can obtain the `role_name` by listing the roles for a branch.
     * For related information, see [Manage roles](https://neon.tech/docs/manage/roles/).
     *
     * @param data The data for the request.
     * @param data.projectId The Neon project ID
     * @param data.branchId The branch ID
     * @param data.roleName The role name
     * @returns RoleOperations Deleted the specified role from the branch
     * @throws ApiError
     */
    public deleteProjectBranchRole(data: DeleteProjectBranchRoleData): CancelablePromise<DeleteProjectBranchRoleResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/projects/{project_id}/branches/{branch_id}/roles/{role_name}',
            path: {
                project_id: data.projectId,
                branch_id: data.branchId,
                role_name: data.roleName
            },
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * Get role password
     * Retrieves the password for the specified Postgres role, if possible.
     * You can obtain a `project_id` by listing the projects for your Neon account.
     * You can obtain the `branch_id` by listing the project's branches.
     * You can obtain the `role_name` by listing the roles for a branch.
     * For related information, see [Manage roles](https://neon.tech/docs/manage/roles/).
     *
     * @param data The data for the request.
     * @param data.projectId The Neon project ID
     * @param data.branchId The branch ID
     * @param data.roleName The role name
     * @returns RolePasswordResponse Returned password for the specified role
     * @throws ApiError
     */
    public getProjectBranchRolePassword(data: GetProjectBranchRolePasswordData): CancelablePromise<GetProjectBranchRolePasswordResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/projects/{project_id}/branches/{branch_id}/roles/{role_name}/reveal_password',
            path: {
                project_id: data.projectId,
                branch_id: data.branchId,
                role_name: data.roleName
            },
            errors: {
                404: 'Role not found',
                412: 'Storing passwords is disabled',
                default: 'General Error'
            }
        });
    }
    
    /**
     * Reset the role password
     * Resets the password for the specified Postgres role.
     * Returns a new password and operations. The new password is ready to use when the last operation finishes.
     * The old password remains valid until last operation finishes.
     * Connections to the compute endpoint are dropped. If idle,
     * the compute endpoint becomes active for a short period of time.
     *
     * You can obtain a `project_id` by listing the projects for your Neon account.
     * You can obtain the `branch_id` by listing the project's branches.
     * You can obtain the `role_name` by listing the roles for a branch.
     * For related information, see [Manage roles](https://neon.tech/docs/manage/roles/).
     *
     * @param data The data for the request.
     * @param data.projectId The Neon project ID
     * @param data.branchId The branch ID
     * @param data.roleName The role nam
     * @returns RoleOperations Reset the passsword for the specified role
     * @throws ApiError
     */
    public resetProjectBranchRolePassword(data: ResetProjectBranchRolePasswordData): CancelablePromise<ResetProjectBranchRolePasswordResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/projects/{project_id}/branches/{branch_id}/roles/{role_name}/reset_password',
            path: {
                project_id: data.projectId,
                branch_id: data.branchId,
                role_name: data.roleName
            },
            errors: {
                default: 'General Error'
            }
        });
    }
    
}

export class EndpointService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Create a compute endpoint
     * Creates a compute endpoint for the specified branch.
     * An endpoint is a Neon compute instance.
     * There is a maximum of one read-write compute endpoint per branch.
     * If the specified branch already has a read-write compute endpoint, the operation fails.
     * A branch can have multiple read-only compute endpoints.
     *
     * You can obtain a `project_id` by listing the projects for your Neon account.
     * You can obtain `branch_id` by listing the project's branches.
     * A `branch_id` has a `br-` prefix.
     * For supported regions and `region_id` values, see [Regions](https://neon.tech/docs/introduction/regions/).
     * For more information about compute endpoints, see [Manage computes](https://neon.tech/docs/manage/endpoints/).
     *
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.projectId The Neon project ID
     * @returns EndpointOperations Created a compute endpoint
     * @throws ApiError
     */
    public createProjectEndpoint(data: CreateProjectEndpointData): CancelablePromise<CreateProjectEndpointResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/projects/{project_id}/endpoints',
            path: {
                project_id: data.projectId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * Get a list of compute endpoints
     * Retrieves a list of compute endpoints for the specified project.
     * A compute endpoint is a Neon compute instance.
     * You can obtain a `project_id` by listing the projects for your Neon account.
     * For information about compute endpoints, see [Manage computes](https://neon.tech/docs/manage/endpoints/).
     *
     * @param data The data for the request.
     * @param data.projectId The Neon project ID
     * @returns EndpointsResponse Returned a list of endpoints for the specified project
     * @throws ApiError
     */
    public listProjectEndpoints(data: ListProjectEndpointsData): CancelablePromise<ListProjectEndpointsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/projects/{project_id}/endpoints',
            path: {
                project_id: data.projectId
            },
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * Get a compute endpoint
     * Retrieves information about the specified compute endpoint.
     * A compute endpoint is a Neon compute instance.
     * You can obtain a `project_id` by listing the projects for your Neon account.
     * You can obtain an `endpoint_id` by listing your project's compute endpoints.
     * An `endpoint_id` has an `ep-` prefix.
     * For information about compute endpoints, see [Manage computes](https://neon.tech/docs/manage/endpoints/).
     *
     * @param data The data for the request.
     * @param data.projectId The Neon project ID
     * @param data.endpointId The endpoint ID
     * @returns EndpointResponse Returned information about the specified endpoint
     * @throws ApiError
     */
    public getProjectEndpoint(data: GetProjectEndpointData): CancelablePromise<GetProjectEndpointResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/projects/{project_id}/endpoints/{endpoint_id}',
            path: {
                project_id: data.projectId,
                endpoint_id: data.endpointId
            },
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * Delete a compute endpoint
     * Delete the specified compute endpoint.
     * A compute endpoint is a Neon compute instance.
     * Deleting a compute endpoint drops existing network connections to the compute endpoint.
     * The deletion is completed when last operation in the chain finishes successfully.
     *
     * You can obtain a `project_id` by listing the projects for your Neon account.
     * You can obtain an `endpoint_id` by listing your project's compute endpoints.
     * An `endpoint_id` has an `ep-` prefix.
     * For information about compute endpoints, see [Manage computes](https://neon.tech/docs/manage/endpoints/).
     *
     * @param data The data for the request.
     * @param data.projectId The Neon project ID
     * @param data.endpointId The endpoint ID
     * @returns EndpointOperations Deleted the specified compute endpoint
     * @throws ApiError
     */
    public deleteProjectEndpoint(data: DeleteProjectEndpointData): CancelablePromise<DeleteProjectEndpointResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/projects/{project_id}/endpoints/{endpoint_id}',
            path: {
                project_id: data.projectId,
                endpoint_id: data.endpointId
            },
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * Update a compute endpoint
     * Updates the specified compute endpoint.
     *
     * You can obtain a `project_id` by listing the projects for your Neon account.
     * You can obtain an `endpoint_id` and `branch_id` by listing your project's compute endpoints.
     * An `endpoint_id` has an `ep-` prefix. A `branch_id` has a `br-` prefix.
     * For more information about compute endpoints, see [Manage computes](https://neon.tech/docs/manage/endpoints/).
     *
     * If the returned list of operations is not empty, the compute endpoint is not ready to use.
     * The client must wait for the last operation to finish before using the compute endpoint.
     * If the compute endpoint was idle before the update, it becomes active for a short period of time,
     * and the control plane suspends it again after the update.
     *
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.projectId The Neon project ID
     * @param data.endpointId The endpoint ID
     * @returns EndpointOperations Updated the specified compute endpoint
     * @throws ApiError
     */
    public updateProjectEndpoint(data: UpdateProjectEndpointData): CancelablePromise<UpdateProjectEndpointResponse> {
        return this.httpRequest.request({
            method: 'PATCH',
            url: '/projects/{project_id}/endpoints/{endpoint_id}',
            path: {
                project_id: data.projectId,
                endpoint_id: data.endpointId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * Start a compute endpoint
     * Starts a compute endpoint. The compute endpoint is ready to use
     * after the last operation in chain finishes successfully.
     *
     * You can obtain a `project_id` by listing the projects for your Neon account.
     * You can obtain an `endpoint_id` by listing your project's compute endpoints.
     * An `endpoint_id` has an `ep-` prefix.
     * For information about compute endpoints, see [Manage computes](https://neon.tech/docs/manage/endpoints/).
     *
     * @param data The data for the request.
     * @param data.projectId The Neon project ID
     * @param data.endpointId The endpoint ID
     * @returns EndpointOperations Started the specified compute endpoint
     * @throws ApiError
     */
    public startProjectEndpoint(data: StartProjectEndpointData): CancelablePromise<StartProjectEndpointResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/projects/{project_id}/endpoints/{endpoint_id}/start',
            path: {
                project_id: data.projectId,
                endpoint_id: data.endpointId
            },
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * Suspend a compute endpoint
     * Suspend the specified compute endpoint
     * You can obtain a `project_id` by listing the projects for your Neon account.
     * You can obtain an `endpoint_id` by listing your project's compute endpoints.
     * An `endpoint_id` has an `ep-` prefix.
     * For information about compute endpoints, see [Manage computes](https://neon.tech/docs/manage/endpoints/).
     *
     * @param data The data for the request.
     * @param data.projectId The Neon project ID
     * @param data.endpointId The endpoint ID
     * @returns EndpointOperations Suspended the specified endpoint
     * @throws ApiError
     */
    public suspendProjectEndpoint(data: SuspendProjectEndpointData): CancelablePromise<SuspendProjectEndpointResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/projects/{project_id}/endpoints/{endpoint_id}/suspend',
            path: {
                project_id: data.projectId,
                endpoint_id: data.endpointId
            },
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * Restart a compute endpoint
     * Restart the specified compute endpoint: suspend immediately followed by start operations.
     * You can obtain a `project_id` by listing the projects for your Neon account.
     * You can obtain an `endpoint_id` by listing your project's compute endpoints.
     * An `endpoint_id` has an `ep-` prefix.
     * For information about compute endpoints, see [Manage computes](https://neon.tech/docs/manage/endpoints/).
     *
     * @param data The data for the request.
     * @param data.projectId The Neon project ID
     * @param data.endpointId The endpoint ID
     * @returns EndpointOperations Restarted endpoint
     * @throws ApiError
     */
    public restartProjectEndpoint(data: RestartProjectEndpointData): CancelablePromise<RestartProjectEndpointResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/projects/{project_id}/endpoints/{endpoint_id}/restart',
            path: {
                project_id: data.projectId,
                endpoint_id: data.endpointId
            },
            errors: {
                default: 'General Error'
            }
        });
    }
    
}

export class ConsumptionService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get account consumption metrics
     * Retrieves consumption metrics for Scale plan accounts. History begins at the time of upgrade.
     * Available for Scale plan users only.
     *
     * @param data The data for the request.
     * @param data.from Specify the start `date-time` for the consumption period.
     * The `date-time` value is rounded according to the specified `granularity`.
     * For example, `2024-03-15T15:30:00Z` for `daily` granularity will be rounded to `2024-03-15T00:00:00Z`.
     * The specified `date-time` value must respect the specified granularity:
     * - For `hourly`, consumption metrics are limited to the last 168 hours.
     * - For `daily`, consumption metrics are limited to the last 60 days.
     * - For `monthly`, consumption metrics are limited to the past year.
     *
     * The consumption history is available starting from `March 1, 2024, at 00:00:00 UTC`.
     *
     * @param data.to Specify the end `date-time` for the consumption period.
     * The `date-time` value is rounded according to the specified granularity.
     * For example, `2024-03-15T15:30:00Z` for `daily` granularity will be rounded to `2024-03-15T00:00:00Z`.
     * The specified `date-time` value must respect the specified granularity:
     * - For `hourly`, consumption metrics are limited to the last 168 hours.
     * - For `daily`, consumption metrics are limited to the last 60 days.
     * - For `monthly`, consumption metrics are limited to the past year.
     *
     * @param data.granularity Specify the granularity of consumption metrics.
     * Hourly, daily, and monthly metrics are available for the last 168 hours, 60 days,
     * and 1 year, respectively.
     *
     * @param data.orgId Specify the organization for which the consumption metrics should be returned.
     * If this parameter is not provided, the endpoint will return the metrics for the
     * authenticated user's account.
     *
     * @param data.includeV1Metrics Include metrics utilized in previous pricing models.
     * - **data_storage_bytes_hour**: The sum of the maximum observed storage values for each hour
     * for each project, which never decreases.
     *
     * @returns ConsumptionHistoryPerAccountResponse Returned consumption metrics for the Neon account
     * @throws ApiError
     */
    public getConsumptionHistoryPerAccount(data: GetConsumptionHistoryPerAccountData): CancelablePromise<GetConsumptionHistoryPerAccountResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/consumption_history/account',
            query: {
                from: data.from,
                to: data.to,
                granularity: data.granularity,
                org_id: data.orgId,
                include_v1_metrics: data.includeV1Metrics
            },
            errors: {
                403: 'This endpoint is not available. It is only supported with Scale plan accounts.',
                404: 'Account is not a member of the organization specified by `org_id`.',
                406: `The specified \`date-time\` range is outside the boundaries of the specified \`granularity\`.
Adjust your \`from\` and \`to\` values or select a different \`granularity\`.
`,
                429: 'Too many requests',
                default: 'General Error'
            }
        });
    }
    
    /**
     * Get consumption metrics for each project
     * Retrieves consumption metrics for Scale plan projects. History begins at the time of upgrade.
     * Available for Scale plan users only.
     *
     * @param data The data for the request.
     * @param data.from Specify the start `date-time` for the consumption period.
     * The `date-time` value is rounded according to the specified `granularity`.
     * For example, `2024-03-15T15:30:00Z` for `daily` granularity will be rounded to `2024-03-15T00:00:00Z`.
     * The specified `date-time` value must respect the specified `granularity`:
     * - For `hourly`, consumption metrics are limited to the last 168 hours.
     * - For `daily`, consumption metrics are limited to the last 60 days.
     * - For `monthly`, consumption metrics are limited to the last year.
     *
     * The consumption history is available starting from `March 1, 2024, at 00:00:00 UTC`.
     *
     * @param data.to Specify the end `date-time` for the consumption period.
     * The `date-time` value is rounded according to the specified granularity.
     * For example, `2024-03-15T15:30:00Z` for `daily` granularity will be rounded to `2024-03-15T00:00:00Z`.
     * The specified `date-time` value must respect the specified `granularity`:
     * - For `hourly`, consumption metrics are limited to the last 168 hours.
     * - For `daily`, consumption metrics are limited to the last 60 days.
     * - For `monthly`, consumption metrics are limited to the last year.
     *
     * @param data.granularity Specify the granularity of consumption metrics.
     * Hourly, daily, and monthly metrics are available for the last 168 hours, 60 days,
     * and 1 year, respectively.
     *
     * @param data.cursor Specify the cursor value from the previous response to get the next batch of projects.
     * @param data.limit Specify a value from 1 to 100 to limit number of projects in the response.
     * @param data.projectIds Specify a list of project IDs to filter the response.
     * If omitted, the response will contain all projects.
     *
     * @param data.orgId Specify the organization for which the project consumption metrics should be returned.
     * If this parameter is not provided, the endpoint will return the metrics for the
     * authenticated user's projects.
     *
     * @param data.includeV1Metrics Include metrics utilized in previous pricing models.
     * - **data_storage_bytes_hour**: The sum of the maximum observed storage values for each hour,
     * which never decreases.
     *
     * @returns unknown Returned project consumption metrics for the Neon account
     * @throws ApiError
     */
    public getConsumptionHistoryPerProject(data: GetConsumptionHistoryPerProjectData): CancelablePromise<GetConsumptionHistoryPerProjectResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/consumption_history/projects',
            query: {
                cursor: data.cursor,
                limit: data.limit,
                project_ids: data.projectIds,
                from: data.from,
                to: data.to,
                granularity: data.granularity,
                org_id: data.orgId,
                include_v1_metrics: data.includeV1Metrics
            },
            errors: {
                403: 'This endpoint is not available. It is only supported with Scale plan accounts.',
                404: 'Account is not a member of the organization specified by `org_id`.',
                406: `The specified \`date-time\` range is outside the boundaries of the specified \`granularity\`.
Adjust your \`from\` and \`to\` values or select a different \`granularity\`.
`,
                429: 'Too many requests',
                default: 'General Error'
            }
        });
    }
    
    /**
     * Get project consumption metrics
     * Retrieves consumption metrics for each project for the current billing period.
     * For usage information, see [Retrieving metrics for all projects](https://neon.tech/docs/guides/partner-billing#retrieving-metrics-for-all-projects).
     *
     * @param data The data for the request.
     * @param data.cursor Specify the cursor value from the previous response to get the next batch of projects
     * @param data.limit Specify a value from 1 to 1000 to limit number of projects in the response
     * @param data.from Specify the start date-time for the consumption period.
     * The time value must be provided in ISO 8601 format.
     * If `from` or `to` is not specified, we return only current consumption period.
     *
     * @param data.to Specify the end date-time period for the consumption period.
     * The time value must be provided in ISO 8601 format.
     * If `from` or `to` is not specified, only the current consumption period is returned.
     *
     * @param data.orgId Specify the organization for which the project consumption metrics should be returned.
     * If this parameter is not provided, the endpoint will return the metrics for the authenticated
     * user's projects.
     *
     * @returns unknown Returned a list of project consumption metrics for the Neon account
     * @throws ApiError
     */
    public listProjectsConsumption(data: ListProjectsConsumptionData = {}): CancelablePromise<ListProjectsConsumptionResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/consumption/projects',
            query: {
                cursor: data.cursor,
                limit: data.limit,
                from: data.from,
                to: data.to,
                org_id: data.orgId
            },
            errors: {
                404: 'Account is not a member of the organization specified by `org_id`.',
                default: 'General Error'
            }
        });
    }
    
}

export class UsersService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get current user details
     * Retrieves information about the current Neon user account.
     *
     * @returns CurrentUserInfoResponse Returned information about the current user
     *
     * @throws ApiError
     */
    public getCurrentUserInfo(): CancelablePromise<GetCurrentUserInfoResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/users/me',
            errors: {
                default: 'General Error'
            }
        });
    }
    
}

export class DefaultService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get current user organizations list
     * Retrieves information about the current Neon user's organizations
     *
     * @returns OrganizationsResponse Returned information about the current user organizations
     *
     * @throws ApiError
     */
    public getCurrentUserOrganizations(): CancelablePromise<GetCurrentUserOrganizationsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/users/me/organizations',
            errors: {
                default: 'General Error'
            }
        });
    }
    
}
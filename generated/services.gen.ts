// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import type { BaseHttpRequest } from './core/BaseHttpRequest';
import type { ListApiKeysResponse, CreateApiKeyData, CreateApiKeyResponse, RevokeApiKeyData, RevokeApiKeyResponse, GetProjectOperationData, GetProjectOperationResponse, ListProjectsData, ListProjectsResponse, CreateProjectData, CreateProjectResponse, ListSharedProjectsData, ListSharedProjectsResponse, GetProjectData, GetProjectResponse, UpdateProjectData, UpdateProjectResponse, DeleteProjectData, DeleteProjectResponse, ListProjectOperationsData, ListProjectOperationsResponse, ListProjectPermissionsData, ListProjectPermissionsResponse, GrantPermissionToProjectData, GrantPermissionToProjectResponse, RevokePermissionFromProjectData, RevokePermissionFromProjectResponse, GetConnectionUriData, GetConnectionUriResponse, CreateProjectBranchData, CreateProjectBranchResponse, ListProjectBranchesData, ListProjectBranchesResponse, GetProjectBranchData, GetProjectBranchResponse, DeleteProjectBranchData, DeleteProjectBranchResponse, UpdateProjectBranchData, UpdateProjectBranchResponse, RestoreProjectBranchData, RestoreProjectBranchResponse, SetPrimaryProjectBranchData, SetPrimaryProjectBranchResponse, ListProjectBranchEndpointsData, ListProjectBranchEndpointsResponse, ListProjectBranchDatabasesData, ListProjectBranchDatabasesResponse, CreateProjectBranchDatabaseData, CreateProjectBranchDatabaseResponse, GetProjectBranchDatabaseData, GetProjectBranchDatabaseResponse, UpdateProjectBranchDatabaseData, UpdateProjectBranchDatabaseResponse, DeleteProjectBranchDatabaseData, DeleteProjectBranchDatabaseResponse, ListProjectBranchRolesData, ListProjectBranchRolesResponse, CreateProjectBranchRoleData, CreateProjectBranchRoleResponse, GetProjectBranchRoleData, GetProjectBranchRoleResponse, DeleteProjectBranchRoleData, DeleteProjectBranchRoleResponse, GetProjectBranchRolePasswordData, GetProjectBranchRolePasswordResponse, ResetProjectBranchRolePasswordData, ResetProjectBranchRolePasswordResponse, CreateProjectEndpointData, CreateProjectEndpointResponse, ListProjectEndpointsData, ListProjectEndpointsResponse, GetProjectEndpointData, GetProjectEndpointResponse, DeleteProjectEndpointData, DeleteProjectEndpointResponse, UpdateProjectEndpointData, UpdateProjectEndpointResponse, StartProjectEndpointData, StartProjectEndpointResponse, SuspendProjectEndpointData, SuspendProjectEndpointResponse, RestartProjectEndpointData, RestartProjectEndpointResponse, GetConsumptionHistoryPerAccountData, GetConsumptionHistoryPerAccountResponse, GetConsumptionHistoryPerProjectData, GetConsumptionHistoryPerProjectResponse, ListProjectsConsumptionData, ListProjectsConsumptionResponse, GetCurrentUserInfoResponse } from './types.gen';

/**
 * Get a list of API keys
 * Retrieves the API keys for your Neon account.
 * The response does not include API key tokens. A token is only provided when creating an API key.
 * API keys can also be managed in the Neon Console.
 * For more information, see [Manage API keys](https://neon.tech/docs/manage/api-keys/).
 *
 * @returns ApiKeysListResponseItem Returned the API keys for the Neon account
 * @returns GeneralError General Error
 * @throws ApiError
 */
export const listApiKeys = (): CancelablePromise<ListApiKeysResponse> => { return this.httpRequest.request({
    method: 'GET',
    url: '/api_keys'
}); };

/**
 * Create an API key
 * Creates an API key.
 * The `key_name` is a user-specified name for the key.
 * This method returns an `id` and `key`. The `key` is a randomly generated, 64-bit token required to access the Neon API.
 * API keys can also be managed in the Neon Console.
 * See [Manage API keys](https://neon.tech/docs/manage/api-keys/).
 *
 * @param data The data for the request.
 * @param data.requestBody
 * @returns ApiKeyCreateResponse Created an API key
 * @returns GeneralError General Error
 * @throws ApiError
 */
export const createApiKey = (data: CreateApiKeyData): CancelablePromise<CreateApiKeyResponse> => { return this.httpRequest.request({
    method: 'POST',
    url: '/api_keys',
    body: data.requestBody,
    mediaType: 'application/json'
}); };

/**
 * Revoke an API key
 * Revokes the specified API key.
 * An API key that is no longer needed can be revoked.
 * This action cannot be reversed.
 * You can obtain `key_id` values by listing the API keys for your Neon account.
 * API keys can also be managed in the Neon Console.
 * See [Manage API keys](https://neon.tech/docs/manage/api-keys/).
 *
 * @param data The data for the request.
 * @param data.keyId The API key ID
 * @returns ApiKeyRevokeResponse Revoked the specified API key
 * @returns GeneralError General Error
 * @throws ApiError
 */
export const revokeApiKey = (data: RevokeApiKeyData): CancelablePromise<RevokeApiKeyResponse> => { return this.httpRequest.request({
    method: 'DELETE',
    url: '/api_keys/{key_id}',
    path: {
        key_id: data.keyId
    }
}); };

/**
 * Get operation details
 * Retrieves details for the specified operation.
 * An operation is an action performed on a Neon project resource.
 * You can obtain a `project_id` by listing the projects for your Neon account.
 * You can obtain a `operation_id` by listing operations for the project.
 *
 * @param data The data for the request.
 * @param data.projectId The Neon project ID
 * @param data.operationId The operation ID
 * @returns OperationResponse Returned details for the specified operation
 * @returns GeneralError General Error
 * @throws ApiError
 */
export const getProjectOperation = (data: GetProjectOperationData): CancelablePromise<GetProjectOperationResponse> => { return this.httpRequest.request({
    method: 'GET',
    url: '/projects/{project_id}/operations/{operation_id}',
    path: {
        project_id: data.projectId,
        operation_id: data.operationId
    }
}); };

/**
 * Get a list of projects
 * Retrieves a list of projects for the Neon account.
 * A project is the top-level object in the Neon object hierarchy.
 * For more information, see [Manage projects](https://neon.tech/docs/manage/projects/).
 *
 * @param data The data for the request.
 * @param data.cursor Specify the cursor value from the previous response to retrieve the next batch of projects.
 * @param data.limit Specify a value from 1 to 400 to limit number of projects in the response.
 * @param data.search Search by project `name` or `id`. You can specify partial `name` or `id` values to filter results.
 * @param data.orgId Search for projects by `org_id` (Comming soon).
 * @returns unknown Returned a list of projects for the Neon account
 * @returns GeneralError General Error
 * @throws ApiError
 */
export const listProjects = (data: ListProjectsData = {}): CancelablePromise<ListProjectsResponse> => { return this.httpRequest.request({
    method: 'GET',
    url: '/projects',
    query: {
        cursor: data.cursor,
        limit: data.limit,
        search: data.search,
        org_id: data.orgId
    }
}); };

/**
 * Create a project
 * Creates a Neon project.
 * A project is the top-level object in the Neon object hierarchy.
 * Plan limits define how many projects you can create.
 * Neon's Free plan permits one project per Neon account.
 * For more information, see [Manage projects](https://neon.tech/docs/manage/projects/).
 *
 * You can specify a region and Postgres version in the request body.
 * Neon currently supports PostgreSQL 14, 15, and 16.
 * For supported regions and `region_id` values, see [Regions](https://neon.tech/docs/introduction/regions/).
 *
 * @param data The data for the request.
 * @param data.requestBody
 * @returns unknown Created a project.
 * The project includes a connection URI with a database, password, and role.
 * At least one non-protected role is created with a password.
 * Wait until the operations are finished before attempting to connect to a project database.
 *
 * @returns GeneralError General Error
 * @throws ApiError
 */
export const createProject = (data: CreateProjectData): CancelablePromise<CreateProjectResponse> => { return this.httpRequest.request({
    method: 'POST',
    url: '/projects',
    body: data.requestBody,
    mediaType: 'application/json'
}); };

/**
 * Get a list of shared projects
 * Retrieves a list of shared projects for the Neon account.
 * A project is the top-level object in the Neon object hierarchy.
 * For more information, see [Manage projects](https://neon.tech/docs/manage/projects/).
 *
 * @param data The data for the request.
 * @param data.cursor Specify the cursor value from the previous response to get the next batch of projects.
 * @param data.limit Specify a value from 1 to 400 to limit number of projects in the response.
 * @param data.search Search query by name or id.
 * @returns unknown Returned a list of shared projects for the Neon account
 * @returns GeneralError General Error
 * @throws ApiError
 */
export const listSharedProjects = (data: ListSharedProjectsData = {}): CancelablePromise<ListSharedProjectsResponse> => { return this.httpRequest.request({
    method: 'GET',
    url: '/projects/shared',
    query: {
        cursor: data.cursor,
        limit: data.limit,
        search: data.search
    }
}); };

/**
 * Get project details
 * Retrieves information about the specified project.
 * A project is the top-level object in the Neon object hierarchy.
 * You can obtain a `project_id` by listing the projects for your Neon account.
 *
 * @param data The data for the request.
 * @param data.projectId The Neon project ID
 * @returns ProjectResponse Returned information about the specified project
 * @returns GeneralError General Error
 * @throws ApiError
 */
export const getProject = (data: GetProjectData): CancelablePromise<GetProjectResponse> => { return this.httpRequest.request({
    method: 'GET',
    url: '/projects/{project_id}',
    path: {
        project_id: data.projectId
    }
}); };

/**
 * Update a project
 * Updates the specified project.
 * You can obtain a `project_id` by listing the projects for your Neon account.
 * Neon permits updating the project name only.
 *
 * @param data The data for the request.
 * @param data.requestBody
 * @param data.projectId The Neon project ID
 * @returns unknown Updated the specified project
 * @returns GeneralError General Error
 * @throws ApiError
 */
export const updateProject = (data: UpdateProjectData): CancelablePromise<UpdateProjectResponse> => { return this.httpRequest.request({
    method: 'PATCH',
    url: '/projects/{project_id}',
    path: {
        project_id: data.projectId
    },
    body: data.requestBody,
    mediaType: 'application/json'
}); };

/**
 * Delete a project
 * Deletes the specified project.
 * You can obtain a `project_id` by listing the projects for your Neon account.
 * Deleting a project is a permanent action.
 * Deleting a project also deletes endpoints, branches, databases, and users that belong to the project.
 *
 * @param data The data for the request.
 * @param data.projectId The Neon project ID
 * @returns ProjectResponse Deleted the specified project
 * @returns GeneralError General Error
 * @throws ApiError
 */
export const deleteProject = (data: DeleteProjectData): CancelablePromise<DeleteProjectResponse> => { return this.httpRequest.request({
    method: 'DELETE',
    url: '/projects/{project_id}',
    path: {
        project_id: data.projectId
    }
}); };

/**
 * Get a list of operations
 * Retrieves a list of operations for the specified Neon project.
 * You can obtain a `project_id` by listing the projects for your Neon account.
 * The number of operations returned can be large.
 * To paginate the response, issue an initial request with a `limit` value.
 * Then, add the `cursor` value that was returned in the response to the next request.
 *
 * @param data The data for the request.
 * @param data.projectId The Neon project ID
 * @param data.cursor Specify the cursor value from the previous response to get the next batch of operations
 * @param data.limit Specify a value from 1 to 1000 to limit number of operations in the response
 * @returns unknown Returned a list of operations
 *
 * @returns GeneralError General Error
 * @throws ApiError
 */
export const listProjectOperations = (data: ListProjectOperationsData): CancelablePromise<ListProjectOperationsResponse> => { return this.httpRequest.request({
    method: 'GET',
    url: '/projects/{project_id}/operations',
    path: {
        project_id: data.projectId
    },
    query: {
        cursor: data.cursor,
        limit: data.limit
    }
}); };

/**
 * List project access
 * Retrieves details about users who have access to the project, including the permission `id`, the granted-to email address, and the date project access was granted.
 * @param data The data for the request.
 * @param data.projectId
 * @returns ProjectPermissions Returned project access details
 * @returns GeneralError General Error
 * @throws ApiError
 */
export const listProjectPermissions = (data: ListProjectPermissionsData): CancelablePromise<ListProjectPermissionsResponse> => { return this.httpRequest.request({
    method: 'GET',
    url: '/projects/{project_id}/permissions',
    path: {
        project_id: data.projectId
    }
}); };

/**
 * Grant project access
 * Grants project access to the account associated with the specified email address
 * @param data The data for the request.
 * @param data.requestBody
 * @param data.projectId
 * @returns ProjectPermission Granted project access
 * @returns GeneralError General Error
 * @throws ApiError
 */
export const grantPermissionToProject = (data: GrantPermissionToProjectData): CancelablePromise<GrantPermissionToProjectResponse> => { return this.httpRequest.request({
    method: 'POST',
    url: '/projects/{project_id}/permissions',
    path: {
        project_id: data.projectId
    },
    body: data.requestBody,
    mediaType: 'application/json'
}); };

/**
 * Revoke project access
 * Revokes project access from the user associted with the specified permisison `id`. You can retrieve a user's permission `id` by listing project access.
 * @param data The data for the request.
 * @param data.projectId
 * @param data.permissionId
 * @returns ProjectPermission Revoked project access
 * @returns GeneralError General Error
 * @throws ApiError
 */
export const revokePermissionFromProject = (data: RevokePermissionFromProjectData): CancelablePromise<RevokePermissionFromProjectResponse> => { return this.httpRequest.request({
    method: 'DELETE',
    url: '/projects/{project_id}/permissions/{permission_id}',
    path: {
        project_id: data.projectId,
        permission_id: data.permissionId
    }
}); };

/**
 * Get a connection URI
 * Retrieves a connection URI for the specified database.
 * You can obtain a `project_id` by listing the projects for your Neon account.
 * You can obtain the `database_name` by listing the databases for a branch.
 * You can obtain a `role_name` by listing the roles for a branch.
 *
 * @param data The data for the request.
 * @param data.projectId The Neon project ID
 * @param data.databaseName The database name
 * @param data.roleName The role name
 * @param data.branchId The branch ID. Defaults to your project's primary `branch_id` if not specified.
 * @param data.endpointId The endpoint ID. Defaults to the read-write `endpoint_id` associated with the `branch_id` if not specified.
 * @param data.pooled Adds the `-pooler` option to the connection URI when set to `true`, creating a pooled connection URI.
 * @returns ConnectionURIResponse Returned the connection URI
 * @returns GeneralError General Error
 * @throws ApiError
 */
export const getConnectionUri = (data: GetConnectionUriData): CancelablePromise<GetConnectionUriResponse> => { return this.httpRequest.request({
    method: 'GET',
    url: '/projects/{project_id}/connection_uri',
    path: {
        project_id: data.projectId
    },
    query: {
        branch_id: data.branchId,
        endpoint_id: data.endpointId,
        database_name: data.databaseName,
        role_name: data.roleName,
        pooled: data.pooled
    }
}); };

/**
 * Create a branch
 * Creates a branch in the specified project.
 * You can obtain a `project_id` by listing the projects for your Neon account.
 *
 * This method does not require a request body, but you can specify one to create a compute endpoint for the branch or to select a non-default parent branch.
 * The default behavior is to create a branch from the project's primary branch with no compute endpoint, and the branch name is auto-generated.
 * There is a maximum of one read-write endpoint per branch.
 * A branch can have multiple read-only endpoints.
 * For related information, see [Manage branches](https://neon.tech/docs/manage/branches/).
 *
 * @param data The data for the request.
 * @param data.projectId The Neon project ID
 * @param data.requestBody
 * @returns unknown Created a branch. An endpoint is only created if it was specified in the request.
 * @returns GeneralError General Error
 * @throws ApiError
 */
export const createProjectBranch = (data: CreateProjectBranchData): CancelablePromise<CreateProjectBranchResponse> => { return this.httpRequest.request({
    method: 'POST',
    url: '/projects/{project_id}/branches',
    path: {
        project_id: data.projectId
    },
    body: data.requestBody,
    mediaType: 'application/json'
}); };

/**
 * Get a list of branches
 * Retrieves a list of branches for the specified project.
 * You can obtain a `project_id` by listing the projects for your Neon account.
 *
 * Each Neon project has a root branch named `main`.
 * A `branch_id` value has a `br-` prefix.
 * A project may contain child branches that were branched from `main` or from another branch.
 * A parent branch is identified by the `parent_id` value, which is the `id` of the parent branch.
 * For related information, see [Manage branches](https://neon.tech/docs/manage/branches/).
 *
 * @param data The data for the request.
 * @param data.projectId The Neon project ID
 * @returns BranchesResponse Returned a list of branches for the specified project
 * @returns GeneralError General Error
 * @throws ApiError
 */
export const listProjectBranches = (data: ListProjectBranchesData): CancelablePromise<ListProjectBranchesResponse> => { return this.httpRequest.request({
    method: 'GET',
    url: '/projects/{project_id}/branches',
    path: {
        project_id: data.projectId
    }
}); };

/**
 * Get branch details
 * Retrieves information about the specified branch.
 * You can obtain a `project_id` by listing the projects for your Neon account.
 * You can obtain a `branch_id` by listing the project's branches.
 * A `branch_id` value has a `br-` prefix.
 *
 * Each Neon project is initially created with a root and primary branch named `main`.
 * A project can contain one or more branches.
 * A parent branch is identified by a `parent_id` value, which is the `id` of the parent branch.
 * For related information, see [Manage branches](https://neon.tech/docs/manage/branches/).
 *
 * @param data The data for the request.
 * @param data.projectId The Neon project ID
 * @param data.branchId The branch ID
 * @returns BranchResponse Returned information about the specified branch
 * @returns GeneralError General Error
 * @throws ApiError
 */
export const getProjectBranch = (data: GetProjectBranchData): CancelablePromise<GetProjectBranchResponse> => { return this.httpRequest.request({
    method: 'GET',
    url: '/projects/{project_id}/branches/{branch_id}',
    path: {
        project_id: data.projectId,
        branch_id: data.branchId
    }
}); };

/**
 * Delete a branch
 * Deletes the specified branch from a project, and places
 * all compute endpoints into an idle state, breaking existing client connections.
 * You can obtain a `project_id` by listing the projects for your Neon account.
 * You can obtain a `branch_id` by listing the project's branches.
 * For related information, see [Manage branches](https://neon.tech/docs/manage/branches/).
 *
 * When a successful response status is received, the compute endpoints are still active,
 * and the branch is not yet deleted from storage.
 * The deletion occurs after all operations finish.
 * You cannot delete a project's root or primary branch, and you cannot delete a branch that has a child branch.
 * A project must have at least one branch.
 *
 * @param data The data for the request.
 * @param data.projectId The Neon project ID
 * @param data.branchId The branch ID
 * @returns BranchOperations Deleted the specified branch
 * @returns GeneralError General Error
 * @throws ApiError
 */
export const deleteProjectBranch = (data: DeleteProjectBranchData): CancelablePromise<DeleteProjectBranchResponse> => { return this.httpRequest.request({
    method: 'DELETE',
    url: '/projects/{project_id}/branches/{branch_id}',
    path: {
        project_id: data.projectId,
        branch_id: data.branchId
    }
}); };

/**
 * Update a branch
 * Updates the specified branch.
 * You can obtain a `project_id` by listing the projects for your Neon account.
 * You can obtain the `branch_id` by listing the project's branches.
 * For more information, see [Manage branches](https://neon.tech/docs/manage/branches/).
 *
 * @param data The data for the request.
 * @param data.requestBody
 * @param data.projectId The Neon project ID
 * @param data.branchId The branch ID
 * @returns BranchOperations Updated the specified branch
 * @returns GeneralError General Error
 * @throws ApiError
 */
export const updateProjectBranch = (data: UpdateProjectBranchData): CancelablePromise<UpdateProjectBranchResponse> => { return this.httpRequest.request({
    method: 'PATCH',
    url: '/projects/{project_id}/branches/{branch_id}',
    path: {
        project_id: data.projectId,
        branch_id: data.branchId
    },
    body: data.requestBody,
    mediaType: 'application/json'
}); };

/**
 * Restore a branch
 * Restores a branch to an earlier state in its own or another branch's history
 * @param data The data for the request.
 * @param data.projectId The Neon project ID
 * @param data.branchId The branch ID
 * @param data.requestBody
 * @returns BranchOperations Updated the specified branch
 * @returns GeneralError General Error
 * @throws ApiError
 */
export const restoreProjectBranch = (data: RestoreProjectBranchData): CancelablePromise<RestoreProjectBranchResponse> => { return this.httpRequest.request({
    method: 'POST',
    url: '/projects/{project_id}/branches/{branch_id}/restore',
    path: {
        project_id: data.projectId,
        branch_id: data.branchId
    },
    body: data.requestBody,
    mediaType: 'application/json'
}); };

/**
 * Set branch as primary
 * Sets the specified branch as the project's primary branch.
 * The primary designation is automatically removed from the previous primary branch.
 * You can obtain a `project_id` by listing the projects for your Neon account.
 * You can obtain the `branch_id` by listing the project's branches.
 * For more information, see [Manage branches](https://neon.tech/docs/manage/branches/).
 *
 * @param data The data for the request.
 * @param data.projectId The Neon project ID
 * @param data.branchId The branch ID
 * @returns BranchOperations Updated the specified branch
 * @returns GeneralError General Error
 * @throws ApiError
 */
export const setPrimaryProjectBranch = (data: SetPrimaryProjectBranchData): CancelablePromise<SetPrimaryProjectBranchResponse> => { return this.httpRequest.request({
    method: 'POST',
    url: '/projects/{project_id}/branches/{branch_id}/set_as_primary',
    path: {
        project_id: data.projectId,
        branch_id: data.branchId
    }
}); };

/**
 * Get a list of branch endpoints
 * Retrieves a list of compute endpoints for the specified branch.
 * Neon permits only one read-write compute endpoint per branch.
 * A branch can have multiple read-only compute endpoints.
 * You can obtain a `project_id` by listing the projects for your Neon account.
 * You can obtain the `branch_id` by listing the project's branches.
 *
 * @param data The data for the request.
 * @param data.projectId The Neon project ID
 * @param data.branchId The branch ID
 * @returns EndpointsResponse Returned a list of endpoints for the specified branch
 * @returns GeneralError General Error
 * @throws ApiError
 */
export const listProjectBranchEndpoints = (data: ListProjectBranchEndpointsData): CancelablePromise<ListProjectBranchEndpointsResponse> => { return this.httpRequest.request({
    method: 'GET',
    url: '/projects/{project_id}/branches/{branch_id}/endpoints',
    path: {
        project_id: data.projectId,
        branch_id: data.branchId
    }
}); };

/**
 * Get a list of databases
 * Retrieves a list of databases for the specified branch.
 * A branch can have multiple databases.
 * You can obtain a `project_id` by listing the projects for your Neon account.
 * You can obtain the `branch_id` by listing the project's branches.
 * For related information, see [Manage databases](https://neon.tech/docs/manage/databases/).
 *
 * @param data The data for the request.
 * @param data.projectId The Neon project ID
 * @param data.branchId The branch ID
 * @returns DatabasesResponse Returned a list of databases of the specified branch
 * @returns GeneralError General Error
 * @throws ApiError
 */
export const listProjectBranchDatabases = (data: ListProjectBranchDatabasesData): CancelablePromise<ListProjectBranchDatabasesResponse> => { return this.httpRequest.request({
    method: 'GET',
    url: '/projects/{project_id}/branches/{branch_id}/databases',
    path: {
        project_id: data.projectId,
        branch_id: data.branchId
    }
}); };

/**
 * Create a database
 * Creates a database in the specified branch.
 * A branch can have multiple databases.
 * You can obtain a `project_id` by listing the projects for your Neon account.
 * You can obtain the `branch_id` by listing the project's branches.
 * For related information, see [Manage databases](https://neon.tech/docs/manage/databases/).
 *
 * @param data The data for the request.
 * @param data.requestBody
 * @param data.projectId The Neon project ID
 * @param data.branchId The branch ID
 * @returns DatabaseOperations Created a database in the specified branch
 * @returns GeneralError General Error
 * @throws ApiError
 */
export const createProjectBranchDatabase = (data: CreateProjectBranchDatabaseData): CancelablePromise<CreateProjectBranchDatabaseResponse> => { return this.httpRequest.request({
    method: 'POST',
    url: '/projects/{project_id}/branches/{branch_id}/databases',
    path: {
        project_id: data.projectId,
        branch_id: data.branchId
    },
    body: data.requestBody,
    mediaType: 'application/json'
}); };

/**
 * Get database details
 * Retrieves information about the specified database.
 * You can obtain a `project_id` by listing the projects for your Neon account.
 * You can obtain the `branch_id` and `database_name` by listing the branch's databases.
 * For related information, see [Manage databases](https://neon.tech/docs/manage/databases/).
 *
 * @param data The data for the request.
 * @param data.projectId The Neon project ID
 * @param data.branchId The branch ID
 * @param data.databaseName The database name
 * @returns DatabaseResponse Returned the database details
 * @returns GeneralError General Error
 * @throws ApiError
 */
export const getProjectBranchDatabase = (data: GetProjectBranchDatabaseData): CancelablePromise<GetProjectBranchDatabaseResponse> => { return this.httpRequest.request({
    method: 'GET',
    url: '/projects/{project_id}/branches/{branch_id}/databases/{database_name}',
    path: {
        project_id: data.projectId,
        branch_id: data.branchId,
        database_name: data.databaseName
    }
}); };

/**
 * Update a database
 * Updates the specified database in the branch.
 * You can obtain a `project_id` by listing the projects for your Neon account.
 * You can obtain the `branch_id` and `database_name` by listing the branch's databases.
 * For related information, see [Manage databases](https://neon.tech/docs/manage/databases/).
 *
 * @param data The data for the request.
 * @param data.requestBody
 * @param data.projectId The Neon project ID
 * @param data.branchId The branch ID
 * @param data.databaseName The database name
 * @returns DatabaseOperations Updated the database
 * @returns GeneralError General Error
 * @throws ApiError
 */
export const updateProjectBranchDatabase = (data: UpdateProjectBranchDatabaseData): CancelablePromise<UpdateProjectBranchDatabaseResponse> => { return this.httpRequest.request({
    method: 'PATCH',
    url: '/projects/{project_id}/branches/{branch_id}/databases/{database_name}',
    path: {
        project_id: data.projectId,
        branch_id: data.branchId,
        database_name: data.databaseName
    },
    body: data.requestBody,
    mediaType: 'application/json'
}); };

/**
 * Delete a database
 * Deletes the specified database from the branch.
 * You can obtain a `project_id` by listing the projects for your Neon account.
 * You can obtain the `branch_id` and `database_name` by listing the branch's databases.
 * For related information, see [Manage databases](https://neon.tech/docs/manage/databases/).
 *
 * @param data The data for the request.
 * @param data.projectId The Neon project ID
 * @param data.branchId The branch ID
 * @param data.databaseName The database name
 * @returns DatabaseOperations Deleted the specified database
 * @returns GeneralError General Error
 * @throws ApiError
 */
export const deleteProjectBranchDatabase = (data: DeleteProjectBranchDatabaseData): CancelablePromise<DeleteProjectBranchDatabaseResponse> => { return this.httpRequest.request({
    method: 'DELETE',
    url: '/projects/{project_id}/branches/{branch_id}/databases/{database_name}',
    path: {
        project_id: data.projectId,
        branch_id: data.branchId,
        database_name: data.databaseName
    }
}); };

/**
 * Get a list of roles
 * Retrieves a list of Postgres roles from the specified branch.
 * You can obtain a `project_id` by listing the projects for your Neon account.
 * You can obtain the `branch_id` by listing the project's branches.
 * For related information, see [Manage roles](https://neon.tech/docs/manage/roles/).
 *
 * @param data The data for the request.
 * @param data.projectId The Neon project ID
 * @param data.branchId The branch ID
 * @returns RolesResponse Returned a list of roles from the specified branch.
 * @returns GeneralError General Error
 * @throws ApiError
 */
export const listProjectBranchRoles = (data: ListProjectBranchRolesData): CancelablePromise<ListProjectBranchRolesResponse> => { return this.httpRequest.request({
    method: 'GET',
    url: '/projects/{project_id}/branches/{branch_id}/roles',
    path: {
        project_id: data.projectId,
        branch_id: data.branchId
    }
}); };

/**
 * Create a role
 * Creates a Postgres role in the specified branch.
 * You can obtain a `project_id` by listing the projects for your Neon account.
 * You can obtain the `branch_id` by listing the project's branches.
 * For related information, see [Manage roles](https://neon.tech/docs/manage/roles/).
 *
 * Connections established to the active compute endpoint will be dropped.
 * If the compute endpoint is idle, the endpoint becomes active for a short period of time and is suspended afterward.
 *
 * @param data The data for the request.
 * @param data.requestBody
 * @param data.projectId The Neon project ID
 * @param data.branchId The branch ID
 * @returns RoleOperations Created a role in the specified branch
 * @returns GeneralError General Error
 * @throws ApiError
 */
export const createProjectBranchRole = (data: CreateProjectBranchRoleData): CancelablePromise<CreateProjectBranchRoleResponse> => { return this.httpRequest.request({
    method: 'POST',
    url: '/projects/{project_id}/branches/{branch_id}/roles',
    path: {
        project_id: data.projectId,
        branch_id: data.branchId
    },
    body: data.requestBody,
    mediaType: 'application/json'
}); };

/**
 * Get role details
 * Retrieves details about the specified role.
 * You can obtain a `project_id` by listing the projects for your Neon account.
 * You can obtain the `branch_id` by listing the project's branches.
 * You can obtain the `role_name` by listing the roles for a branch.
 * In Neon, the terms "role" and "user" are synonymous.
 * For related information, see [Manage roles](https://neon.tech/docs/manage/roles/).
 *
 * @param data The data for the request.
 * @param data.projectId The Neon project ID
 * @param data.branchId The branch ID
 * @param data.roleName The role name
 * @returns RoleResponse Returned details for the specified role
 * @returns GeneralError General Error
 * @throws ApiError
 */
export const getProjectBranchRole = (data: GetProjectBranchRoleData): CancelablePromise<GetProjectBranchRoleResponse> => { return this.httpRequest.request({
    method: 'GET',
    url: '/projects/{project_id}/branches/{branch_id}/roles/{role_name}',
    path: {
        project_id: data.projectId,
        branch_id: data.branchId,
        role_name: data.roleName
    }
}); };

/**
 * Delete a role
 * Deletes the specified Postgres role from the branch.
 * You can obtain a `project_id` by listing the projects for your Neon account.
 * You can obtain the `branch_id` by listing the project's branches.
 * You can obtain the `role_name` by listing the roles for a branch.
 * For related information, see [Manage roles](https://neon.tech/docs/manage/roles/).
 *
 * @param data The data for the request.
 * @param data.projectId The Neon project ID
 * @param data.branchId The branch ID
 * @param data.roleName The role name
 * @returns RoleOperations Deleted the specified role from the branch
 * @returns GeneralError General Error
 * @throws ApiError
 */
export const deleteProjectBranchRole = (data: DeleteProjectBranchRoleData): CancelablePromise<DeleteProjectBranchRoleResponse> => { return this.httpRequest.request({
    method: 'DELETE',
    url: '/projects/{project_id}/branches/{branch_id}/roles/{role_name}',
    path: {
        project_id: data.projectId,
        branch_id: data.branchId,
        role_name: data.roleName
    }
}); };

/**
 * Get role password
 * Retrieves the password for the specified Postgres role, if possible.
 * You can obtain a `project_id` by listing the projects for your Neon account.
 * You can obtain the `branch_id` by listing the project's branches.
 * You can obtain the `role_name` by listing the roles for a branch.
 * For related information, see [Manage roles](https://neon.tech/docs/manage/roles/).
 *
 * @param data The data for the request.
 * @param data.projectId The Neon project ID
 * @param data.branchId The branch ID
 * @param data.roleName The role name
 * @returns RolePasswordResponse Returned password for the specified role
 * @returns GeneralError General Error
 * @throws ApiError
 */
export const getProjectBranchRolePassword = (data: GetProjectBranchRolePasswordData): CancelablePromise<GetProjectBranchRolePasswordResponse> => { return this.httpRequest.request({
    method: 'GET',
    url: '/projects/{project_id}/branches/{branch_id}/roles/{role_name}/reveal_password',
    path: {
        project_id: data.projectId,
        branch_id: data.branchId,
        role_name: data.roleName
    },
    errors: {
        404: 'Role not found',
        412: 'Storing passwords is disabled'
    }
}); };

/**
 * Reset the role password
 * Resets the password for the specified Postgres role.
 * Returns a new password and operations. The new password is ready to use when the last operation finishes.
 * The old password remains valid until last operation finishes.
 * Connections to the compute endpoint are dropped. If idle,
 * the compute endpoint becomes active for a short period of time.
 *
 * You can obtain a `project_id` by listing the projects for your Neon account.
 * You can obtain the `branch_id` by listing the project's branches.
 * You can obtain the `role_name` by listing the roles for a branch.
 * For related information, see [Manage roles](https://neon.tech/docs/manage/roles/).
 *
 * @param data The data for the request.
 * @param data.projectId The Neon project ID
 * @param data.branchId The branch ID
 * @param data.roleName The role nam
 * @returns RoleOperations Reset the passsword for the specified role
 * @returns GeneralError General Error
 * @throws ApiError
 */
export const resetProjectBranchRolePassword = (data: ResetProjectBranchRolePasswordData): CancelablePromise<ResetProjectBranchRolePasswordResponse> => { return this.httpRequest.request({
    method: 'POST',
    url: '/projects/{project_id}/branches/{branch_id}/roles/{role_name}/reset_password',
    path: {
        project_id: data.projectId,
        branch_id: data.branchId,
        role_name: data.roleName
    }
}); };

/**
 * Create a compute endpoint
 * Creates a compute endpoint for the specified branch.
 * An endpoint is a Neon compute instance.
 * There is a maximum of one read-write compute endpoint per branch.
 * If the specified branch already has a read-write compute endpoint, the operation fails.
 * A branch can have multiple read-only compute endpoints.
 *
 * You can obtain a `project_id` by listing the projects for your Neon account.
 * You can obtain `branch_id` by listing the project's branches.
 * A `branch_id` has a `br-` prefix.
 * For supported regions and `region_id` values, see [Regions](https://neon.tech/docs/introduction/regions/).
 * For more information about compute endpoints, see [Manage computes](https://neon.tech/docs/manage/endpoints/).
 *
 * @param data The data for the request.
 * @param data.requestBody
 * @param data.projectId The Neon project ID
 * @returns EndpointOperations Created a compute endpoint
 * @returns GeneralError General Error
 * @throws ApiError
 */
export const createProjectEndpoint = (data: CreateProjectEndpointData): CancelablePromise<CreateProjectEndpointResponse> => { return this.httpRequest.request({
    method: 'POST',
    url: '/projects/{project_id}/endpoints',
    path: {
        project_id: data.projectId
    },
    body: data.requestBody,
    mediaType: 'application/json'
}); };

/**
 * Get a list of compute endpoints
 * Retrieves a list of compute endpoints for the specified project.
 * A compute endpoint is a Neon compute instance.
 * You can obtain a `project_id` by listing the projects for your Neon account.
 * For information about compute endpoints, see [Manage computes](https://neon.tech/docs/manage/endpoints/).
 *
 * @param data The data for the request.
 * @param data.projectId The Neon project ID
 * @returns EndpointsResponse Returned a list of endpoints for the specified project
 * @returns GeneralError General Error
 * @throws ApiError
 */
export const listProjectEndpoints = (data: ListProjectEndpointsData): CancelablePromise<ListProjectEndpointsResponse> => { return this.httpRequest.request({
    method: 'GET',
    url: '/projects/{project_id}/endpoints',
    path: {
        project_id: data.projectId
    }
}); };

/**
 * Get a compute endpoint
 * Retrieves information about the specified compute endpoint.
 * A compute endpoint is a Neon compute instance.
 * You can obtain a `project_id` by listing the projects for your Neon account.
 * You can obtain an `endpoint_id` by listing your project's compute endpoints.
 * An `endpoint_id` has an `ep-` prefix.
 * For information about compute endpoints, see [Manage computes](https://neon.tech/docs/manage/endpoints/).
 *
 * @param data The data for the request.
 * @param data.projectId The Neon project ID
 * @param data.endpointId The endpoint ID
 * @returns EndpointResponse Returned information about the specified endpoint
 * @returns GeneralError General Error
 * @throws ApiError
 */
export const getProjectEndpoint = (data: GetProjectEndpointData): CancelablePromise<GetProjectEndpointResponse> => { return this.httpRequest.request({
    method: 'GET',
    url: '/projects/{project_id}/endpoints/{endpoint_id}',
    path: {
        project_id: data.projectId,
        endpoint_id: data.endpointId
    }
}); };

/**
 * Delete a compute endpoint
 * Delete the specified compute endpoint.
 * A compute endpoint is a Neon compute instance.
 * Deleting a compute endpoint drops existing network connections to the compute endpoint.
 * The deletion is completed when last operation in the chain finishes successfully.
 *
 * You can obtain a `project_id` by listing the projects for your Neon account.
 * You can obtain an `endpoint_id` by listing your project's compute endpoints.
 * An `endpoint_id` has an `ep-` prefix.
 * For information about compute endpoints, see [Manage computes](https://neon.tech/docs/manage/endpoints/).
 *
 * @param data The data for the request.
 * @param data.projectId The Neon project ID
 * @param data.endpointId The endpoint ID
 * @returns EndpointOperations Deleted the specified compute endpoint
 * @returns GeneralError General Error
 * @throws ApiError
 */
export const deleteProjectEndpoint = (data: DeleteProjectEndpointData): CancelablePromise<DeleteProjectEndpointResponse> => { return this.httpRequest.request({
    method: 'DELETE',
    url: '/projects/{project_id}/endpoints/{endpoint_id}',
    path: {
        project_id: data.projectId,
        endpoint_id: data.endpointId
    }
}); };

/**
 * Update a compute endpoint
 * Updates the specified compute endpoint.
 *
 * You can obtain a `project_id` by listing the projects for your Neon account.
 * You can obtain an `endpoint_id` and `branch_id` by listing your project's compute endpoints.
 * An `endpoint_id` has an `ep-` prefix. A `branch_id` has a `br-` prefix.
 * For more information about compute endpoints, see [Manage computes](https://neon.tech/docs/manage/endpoints/).
 *
 * If the returned list of operations is not empty, the compute endpoint is not ready to use.
 * The client must wait for the last operation to finish before using the compute endpoint.
 * If the compute endpoint was idle before the update, it becomes active for a short period of time,
 * and the control plane suspends it again after the update.
 *
 * @param data The data for the request.
 * @param data.requestBody
 * @param data.projectId The Neon project ID
 * @param data.endpointId The endpoint ID
 * @returns EndpointOperations Updated the specified compute endpoint
 * @returns GeneralError General Error
 * @throws ApiError
 */
export const updateProjectEndpoint = (data: UpdateProjectEndpointData): CancelablePromise<UpdateProjectEndpointResponse> => { return this.httpRequest.request({
    method: 'PATCH',
    url: '/projects/{project_id}/endpoints/{endpoint_id}',
    path: {
        project_id: data.projectId,
        endpoint_id: data.endpointId
    },
    body: data.requestBody,
    mediaType: 'application/json'
}); };

/**
 * Start a compute endpoint
 * Starts a compute endpoint. The compute endpoint is ready to use
 * after the last operation in chain finishes successfully.
 *
 * You can obtain a `project_id` by listing the projects for your Neon account.
 * You can obtain an `endpoint_id` by listing your project's compute endpoints.
 * An `endpoint_id` has an `ep-` prefix.
 * For information about compute endpoints, see [Manage computes](https://neon.tech/docs/manage/endpoints/).
 *
 * @param data The data for the request.
 * @param data.projectId The Neon project ID
 * @param data.endpointId The endpoint ID
 * @returns EndpointOperations Started the specified compute endpoint
 * @returns GeneralError General Error
 * @throws ApiError
 */
export const startProjectEndpoint = (data: StartProjectEndpointData): CancelablePromise<StartProjectEndpointResponse> => { return this.httpRequest.request({
    method: 'POST',
    url: '/projects/{project_id}/endpoints/{endpoint_id}/start',
    path: {
        project_id: data.projectId,
        endpoint_id: data.endpointId
    }
}); };

/**
 * Suspend a compute endpoint
 * Suspend the specified compute endpoint
 * You can obtain a `project_id` by listing the projects for your Neon account.
 * You can obtain an `endpoint_id` by listing your project's compute endpoints.
 * An `endpoint_id` has an `ep-` prefix.
 * For information about compute endpoints, see [Manage computes](https://neon.tech/docs/manage/endpoints/).
 *
 * @param data The data for the request.
 * @param data.projectId The Neon project ID
 * @param data.endpointId The endpoint ID
 * @returns EndpointOperations Suspended the specified endpoint
 * @returns GeneralError General Error
 * @throws ApiError
 */
export const suspendProjectEndpoint = (data: SuspendProjectEndpointData): CancelablePromise<SuspendProjectEndpointResponse> => { return this.httpRequest.request({
    method: 'POST',
    url: '/projects/{project_id}/endpoints/{endpoint_id}/suspend',
    path: {
        project_id: data.projectId,
        endpoint_id: data.endpointId
    }
}); };

/**
 * Restart a compute endpoint
 * Restart the specified compute endpoint: suspend immediately followed by start operations.
 * You can obtain a `project_id` by listing the projects for your Neon account.
 * You can obtain an `endpoint_id` by listing your project's compute endpoints.
 * An `endpoint_id` has an `ep-` prefix.
 * For information about compute endpoints, see [Manage computes](https://neon.tech/docs/manage/endpoints/).
 *
 * @param data The data for the request.
 * @param data.projectId The Neon project ID
 * @param data.endpointId The endpoint ID
 * @returns EndpointOperations Restarted endpoint
 * @returns GeneralError General Error
 * @throws ApiError
 */
export const restartProjectEndpoint = (data: RestartProjectEndpointData): CancelablePromise<RestartProjectEndpointResponse> => { return this.httpRequest.request({
    method: 'POST',
    url: '/projects/{project_id}/endpoints/{endpoint_id}/restart',
    path: {
        project_id: data.projectId,
        endpoint_id: data.endpointId
    }
}); };

/**
 * Get account consumption metrics
 * Retrieves consumption metrics for Scale plan accounts. History begins at the time of upgrade.
 * Available for Scale plan users only.
 *
 * @param data The data for the request.
 * @param data.from Specify the start `date-time` for the consumption period.
 * The `date-time` value is rounded according to the specified `granularity`.
 * For example, `2024-03-15T15:30:00Z` for `daily` granularity will be rounded to `2024-03-15T00:00:00Z`.
 * The specified `date-time` value must respect the specified granularity:
 * - For `hourly`, consumption metrics are limited to the last 168 hours.
 * - For `daily`, consumption metrics are limited to the last 60 days.
 * - For `monthly`, consumption metrics are limited to the past year.
 *
 * The consumption history is available starting from `March 1, 2024, at 00:00:00 UTC`.
 *
 * @param data.to Specify the end `date-time` for the consumption period.
 * The `date-time` value is rounded according to the specified granularity.
 * For example, `2024-03-15T15:30:00Z` for `daily` granularity will be rounded to `2024-03-15T00:00:00Z`.
 * The specified `date-time` value must respect the specified granularity:
 * - For `hourly`, consumption metrics are limited to the last 168 hours.
 * - For `daily`, consumption metrics are limited to the last 60 days.
 * - For `monthly`, consumption metrics are limited to the past year.
 *
 * @param data.granularity Specify the granularity of consumption metrics.
 * Hourly, daily, and monthly metrics are available for the last 168 hours, 60 days,
 * and 1 year, respectively.
 *
 * @returns ConsumptionHistoryPerAccountResponse Returned consumption metrics for the Neon account
 * @returns GeneralError General Error
 * @throws ApiError
 */
export const getConsumptionHistoryPerAccount = (data: GetConsumptionHistoryPerAccountData): CancelablePromise<GetConsumptionHistoryPerAccountResponse> => { return this.httpRequest.request({
    method: 'GET',
    url: '/consumption_history/account',
    query: {
        from: data.from,
        to: data.to,
        granularity: data.granularity
    },
    errors: {
        403: 'This endpoint is not available. It is only supported with Scale plan accounts.',
        406: `The specified \`date-time\` range is outside the boundaries of the specified \`granularity\`.
Adjust your \`from\` and \`to\` values or select a different \`granularity\`.
`,
        429: 'Too many requests'
    }
}); };

/**
 * Get consumption metrics for each project
 * Retrieves consumption metrics for Scale plan projects. History begins at the time of upgrade.
 * Available for Scale plan users only.
 *
 * @param data The data for the request.
 * @param data.from Specify the start `date-time` for the consumption period.
 * The `date-time` value is rounded according to the specified `granularity`.
 * For example, `2024-03-15T15:30:00Z` for `daily` granularity will be rounded to `2024-03-15T00:00:00Z`.
 * The specified `date-time` value must respect the specified `granularity`:
 * - For `hourly`, consumption metrics are limited to the last 168 hours.
 * - For `daily`, consumption metrics are limited to the last 60 days.
 * - For `monthly`, consumption metrics are limited to the last year.
 *
 * The consumption history is available starting from `March 1, 2024, at 00:00:00 UTC`.
 *
 * @param data.to Specify the end `date-time` for the consumption period.
 * The `date-time` value is rounded according to the specified granularity.
 * For example, `2024-03-15T15:30:00Z` for `daily` granularity will be rounded to `2024-03-15T00:00:00Z`.
 * The specified `date-time` value must respect the specified `granularity`:
 * - For `hourly`, consumption metrics are limited to the last 168 hours.
 * - For `daily`, consumption metrics are limited to the last 60 days.
 * - For `monthly`, consumption metrics are limited to the last year.
 *
 * @param data.granularity Specify the granularity of consumption metrics.
 * Hourly, daily, and monthly metrics are available for the last 168 hours, 60 days,
 * and 1 year, respectively.
 *
 * @param data.cursor Specify the cursor value from the previous response to get the next batch of projects.
 * @param data.limit Specify a value from 1 to 100 to limit number of projects in the response.
 * @param data.projectIds Specify a list of project IDs to filter the response.
 * If omitted, the response will contain all projects.
 *
 * @returns unknown Returned project consumption metrics for the Neon account
 * @returns GeneralError General Error
 * @throws ApiError
 */
export const getConsumptionHistoryPerProject = (data: GetConsumptionHistoryPerProjectData): CancelablePromise<GetConsumptionHistoryPerProjectResponse> => { return this.httpRequest.request({
    method: 'GET',
    url: '/consumption_history/projects',
    query: {
        cursor: data.cursor,
        limit: data.limit,
        project_ids: data.projectIds,
        from: data.from,
        to: data.to,
        granularity: data.granularity
    },
    errors: {
        403: 'This endpoint is not available. It is only supported with Scale plan accounts.',
        406: `The specified \`date-time\` range is outside the boundaries of the specified \`granularity\`.
Adjust your \`from\` and \`to\` values or select a different \`granularity\`.
`,
        429: 'Too many requests'
    }
}); };

/**
 * Get project consumption metrics
 * Retrieves consumption metrics for each project for the current billing period.
 * For usage information, see [Retrieving metrics for all projects](https://neon.tech/docs/guides/partner-billing#retrieving-metrics-for-all-projects).
 *
 * @param data The data for the request.
 * @param data.cursor Specify the cursor value from the previous response to get the next batch of projects
 * @param data.limit Specify a value from 1 to 1000 to limit number of projects in the response
 * @param data.from Specify the start date-time for the consumption period.
 * The time value must be provided in ISO 8601 format.
 * If `from` or `to` is not specified, we return only current consumption period.
 *
 * @param data.to Specify the end date-time period for the consumption period.
 * The time value must be provided in ISO 8601 format.
 * If `from` or `to` is not specified, only the current consumption period is returned.
 *
 * @returns unknown Returned a list of project consumption metrics for the Neon account
 * @returns GeneralError General Error
 * @throws ApiError
 */
export const listProjectsConsumption = (data: ListProjectsConsumptionData = {}): CancelablePromise<ListProjectsConsumptionResponse> => { return this.httpRequest.request({
    method: 'GET',
    url: '/consumption/projects',
    query: {
        cursor: data.cursor,
        limit: data.limit,
        from: data.from,
        to: data.to
    }
}); };

/**
 * Get current user details
 * Retrieves information about the current Neon user account.
 *
 * @returns CurrentUserInfoResponse Returned information about the current user
 *
 * @returns GeneralError General Error
 * @throws ApiError
 */
export const getCurrentUserInfo = (): CancelablePromise<GetCurrentUserInfoResponse> => { return this.httpRequest.request({
    method: 'GET',
    url: '/users/me'
}); };
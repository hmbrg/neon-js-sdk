// This file is auto-generated by @hey-api/openapi-ts

export const $Features = {
    type: 'object',
    additionalProperties: {
        type: 'boolean'
    }
} as const;

export const $ComputeUnit = {
    type: 'number',
    minimum: 0.25
} as const;

export const $Provisioner = {
    type: 'string',
    description: `The Neon compute provisioner.
Specify the \`k8s-neonvm\` provisioner to create a compute endpoint that supports Autoscaling.
`,
    enum: ['k8s-pod', 'k8s-neonvm']
} as const;

export const $PaginationResponse = {
    type: 'object',
    properties: {
        pagination: {
            '$ref': '#/components/schemas/Pagination'
        }
    }
} as const;

export const $Pagination = {
    description: `Cursor based pagination is used. The user must pass the cursor as is to the backend.
For more information about cursor based pagination, see
https://learn.microsoft.com/en-us/ef/core/querying/pagination#keyset-pagination
`,
    type: 'object',
    required: ['cursor', 'limit'],
    properties: {
        cursor: {
            type: 'string',
            minLength: 1
        }
    },
    example: {
        cursor: '2022-12-07T00:45:05.262011Z'
    }
} as const;

export const $EmptyResponse = {
    type: 'object',
    description: 'Empty response.',
    properties: {}
} as const;

export const $ApiKeyCreateRequest = {
    type: 'object',
    required: ['key_name'],
    properties: {
        key_name: {
            type: 'string',
            description: 'A user-specified API key name. This value is required when creating an API key.'
        }
    }
} as const;

export const $ApiKeyCreateResponse = {
    type: 'object',
    required: ['key', 'id', 'name', 'created_at'],
    properties: {
        id: {
            description: 'The API key ID',
            type: 'integer',
            format: 'int64'
        },
        key: {
            description: 'The generated 64-bit token required to access the Neon API',
            type: 'string'
        },
        name: {
            description: 'The user-specified API key name',
            type: 'string'
        },
        created_at: {
            description: 'A timestamp indicating when the API key was created',
            type: 'string',
            format: 'date-time'
        }
    }
} as const;

export const $ApiKeyRevokeResponse = {
    type: 'object',
    required: ['id', 'name', 'revoked', 'last_used_from_addr'],
    properties: {
        id: {
            description: 'The API key ID',
            type: 'integer',
            format: 'int64'
        },
        name: {
            description: 'The user-specified API key name',
            type: 'string'
        },
        revoked: {
            description: 'A `true` or `false` value indicating whether the API key is revoked',
            type: 'boolean'
        },
        last_used_at: {
            description: 'A timestamp indicating when the API was last used',
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        last_used_from_addr: {
            description: 'The IP address from which the API key was last used',
            type: 'string'
        }
    }
} as const;

export const $ApiKeysListResponseItem = {
    type: 'object',
    required: ['last_used_from_addr', 'id', 'name', 'created_at'],
    properties: {
        id: {
            description: 'The API key ID',
            type: 'integer',
            format: 'int64'
        },
        name: {
            description: 'The user-specified API key name',
            type: 'string'
        },
        created_at: {
            description: 'A timestamp indicating when the API key was created',
            type: 'string',
            format: 'date-time'
        },
        last_used_at: {
            description: 'A timestamp indicating when the API was last used',
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        last_used_from_addr: {
            description: 'The IP address from which the API key was last used',
            type: 'string'
        }
    }
} as const;

export const $Operation = {
    type: 'object',
    required: ['id', 'project_id', 'action', 'status', 'failures_count', 'created_at', 'updated_at', 'total_duration_ms'],
    properties: {
        id: {
            description: 'The operation ID',
            type: 'string',
            format: 'uuid'
        },
        project_id: {
            description: 'The Neon project ID',
            type: 'string'
        },
        branch_id: {
            description: 'The branch ID',
            type: 'string'
        },
        endpoint_id: {
            description: 'The endpoint ID',
            type: 'string'
        },
        action: {
            '$ref': '#/components/schemas/OperationAction'
        },
        status: {
            '$ref': '#/components/schemas/OperationStatus'
        },
        error: {
            description: 'The error that occured',
            type: 'string'
        },
        failures_count: {
            description: 'The number of times the operation failed',
            type: 'integer',
            format: 'int32'
        },
        retry_at: {
            description: 'A timestamp indicating when the operation was last retried',
            type: 'string',
            format: 'date-time'
        },
        created_at: {
            description: 'A timestamp indicating when the operation was created',
            type: 'string',
            format: 'date-time'
        },
        updated_at: {
            description: 'A timestamp indicating when the operation status was last updated',
            type: 'string',
            format: 'date-time'
        },
        total_duration_ms: {
            description: 'The total duration of the operation in milliseconds',
            type: 'integer',
            format: 'int32'
        }
    },
    example: [
        {
            id: 'a07f8772-1877-4da9-a939-3a3ae62d1d8d',
            project_id: 'spring-example-302709',
            branch_id: 'br-wispy-meadow-118737',
            endpoint_id: 'ep-silent-smoke-806639',
            action: 'create_branch',
            status: 'running',
            failures_count: 0,
            created_at: '2022-11-08T23:33:16Z',
            updated_at: '2022-11-08T23:33:20Z',
            total_duration_ms: 400
        },
        {
            id: 'd8ac46eb-a757-42b1-9907-f78322ee394e',
            project_id: 'spring-example-302709',
            branch_id: 'br-wispy-meadow-118737',
            endpoint_id: 'ep-silent-smoke-806639',
            action: 'start_compute',
            status: 'finished',
            failures_count: 0,
            created_at: '2022-11-15T20:02:00Z',
            updated_at: '2022-11-15T20:02:02Z',
            total_duration_ms: 200
        }
    ]
} as const;

export const $OperationResponse = {
    type: 'object',
    required: ['operation'],
    properties: {
        operation: {
            '$ref': '#/components/schemas/Operation'
        }
    }
} as const;

export const $OperationsResponse = {
    type: 'object',
    required: ['operations'],
    properties: {
        operations: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Operation'
            }
        }
    }
} as const;

export const $OperationAction = {
    description: 'The action performed by the operation',
    type: 'string',
    enum: ['create_compute', 'create_timeline', 'start_compute', 'suspend_compute', 'apply_config', 'check_availability', 'delete_timeline', 'create_branch', 'tenant_ignore', 'tenant_attach', 'tenant_detach', 'tenant_reattach', 'replace_safekeeper', 'disable_maintenance', 'apply_storage_config', 'prepare_secondary_pageserver', 'switch_pageserver']
} as const;

export const $OperationStatus = {
    description: 'The status of the operation',
    type: 'string',
    enum: ['scheduling', 'running', 'finished', 'failed', 'error', 'cancelling', 'cancelled', 'skipped']
} as const;

export const $ProjectListItem = {
    description: `Essential data about the project. Full data is available at the getProject endpoint.
`,
    type: 'object',
    required: ['active_time', 'id', 'platform_id', 'region_id', 'name', 'pg_version', 'proxy_host', 'branch_logical_size_limit', 'branch_logical_size_limit_bytes', 'provisioner', 'store_passwords', 'cpu_used_sec', 'creation_source', 'created_at', 'updated_at', 'owner_id'],
    properties: {
        id: {
            description: `The project ID
`,
            type: 'string'
        },
        platform_id: {
            description: `The cloud platform identifier. Currently, only AWS is supported, for which the identifier is \`aws\`.
`,
            type: 'string'
        },
        region_id: {
            description: `The region identifier
`,
            type: 'string'
        },
        name: {
            description: `The project name
`,
            type: 'string'
        },
        provisioner: {
            '$ref': '#/components/schemas/Provisioner'
        },
        default_endpoint_settings: {
            '$ref': '#/components/schemas/DefaultEndpointSettings'
        },
        settings: {
            '$ref': '#/components/schemas/ProjectSettingsData'
        },
        pg_version: {
            '$ref': '#/components/schemas/PgVersion'
        },
        proxy_host: {
            description: `The proxy host for the project. This value combines the \`region_id\`, the \`platform_id\`, and the Neon domain (\`neon.tech\`).
`,
            type: 'string'
        },
        branch_logical_size_limit: {
            description: `The logical size limit for a branch. The value is in MiB.
`,
            type: 'integer',
            format: 'int64'
        },
        branch_logical_size_limit_bytes: {
            description: `The logical size limit for a branch. The value is in B.
`,
            type: 'integer',
            format: 'int64'
        },
        store_passwords: {
            description: `Whether or not passwords are stored for roles in the Neon project. Storing passwords facilitates access to Neon features that require authorization.
`,
            type: 'boolean'
        },
        active_time: {
            description: `Control plane observed endpoints of this project being active this amount of wall-clock time.
`,
            type: 'integer',
            format: 'int64',
            minimum: 0
        },
        cpu_used_sec: {
            deprecated: true,
            description: `DEPRECATED. Use data from the getProject endpoint instead.
`,
            type: 'integer',
            format: 'int64'
        },
        maintenance_starts_at: {
            description: `A timestamp indicating when project maintenance begins. If set, the project is placed into maintenance mode at this time.
`,
            type: 'string',
            format: 'date-time'
        },
        creation_source: {
            description: `The project creation source
`,
            type: 'string'
        },
        created_at: {
            description: `A timestamp indicating when the project was created
`,
            type: 'string',
            format: 'date-time'
        },
        updated_at: {
            description: `A timestamp indicating when the project was last updated
`,
            type: 'string',
            format: 'date-time'
        },
        synthetic_storage_size: {
            description: `The current space occupied by the project in storage, in bytes. Synthetic storage size combines the logical data size and Write-Ahead Log (WAL) size for all branches in a project.
`,
            type: 'integer',
            format: 'int64'
        },
        quota_reset_at: {
            deprecated: true,
            description: `DEPRECATED. Use \`consumption_period_end\` from the getProject endpoint instead.
A timestamp indicating when the project quota resets
`,
            type: 'string',
            format: 'date-time'
        },
        owner_id: {
            type: 'string'
        },
        compute_last_active_at: {
            description: `The most recent time when any endpoint of this project was active.

Omitted when observed no actitivy for endpoints of this project.
`,
            type: 'string',
            format: 'date-time'
        },
        org_id: {
            type: 'string',
            description: `Organization id if a project belongs to organization.
Permissions for the project will be given to organization members as defined by the organization admins.
The permissions of the project do not depend on the user that created the project if a project belongs to an organization.
`
        }
    },
    example: {
        id: 'spring-example-302709',
        platform_id: 'aws',
        region_id: 'aws-us-east-2',
        name: 'spring-example-302709',
        provisioner: 'k8s-pod',
        pg_version: 15,
        proxy_host: 'us-east-2.aws.neon.tech',
        store_passwords: true,
        creation_source: 'console',
        created_at: '2022-12-13T01:30:55Z',
        updated_at: '2022-12-13T01:30:55Z'
    }
} as const;

export const $Project = {
    type: 'object',
    required: ['consumption_period_end', 'consumption_period_start', 'active_time_seconds', 'compute_time_seconds', 'written_data_bytes', 'data_transfer_bytes', 'data_storage_bytes_hour', 'id', 'platform_id', 'region_id', 'name', 'pg_version', 'proxy_host', 'branch_logical_size_limit', 'branch_logical_size_limit_bytes', 'store_passwords', 'cpu_used_sec', 'provisioner', 'creation_source', 'history_retention_seconds', 'created_at', 'updated_at', 'owner_id'],
    properties: {
        data_storage_bytes_hour: {
            description: `Bytes-Hour. Project consumed that much storage hourly during the billing period. The value has some lag.
The value is reset at the beginning of each billing period.
`,
            type: 'integer',
            format: 'int64',
            minimum: 0
        },
        data_transfer_bytes: {
            description: `Bytes. Egress traffic from the Neon cloud to the client for given project over the billing period.
Includes deleted endpoints. The value has some lag. The value is reset at the beginning of each billing period.
`,
            type: 'integer',
            format: 'int64',
            minimum: 0
        },
        written_data_bytes: {
            description: `Bytes. Amount of WAL that travelled through storage for given project across all branches.
The value has some lag. The value is reset at the beginning of each billing period.
`,
            type: 'integer',
            format: 'int64',
            minimum: 0
        },
        compute_time_seconds: {
            description: `Seconds. The number of CPU seconds used by the project's compute endpoints, including compute endpoints that have been deleted.
The value has some lag. The value is reset at the beginning of each billing period.
Examples:
1. An endpoint that uses 1 CPU for 1 second is equal to \`compute_time=1\`.
2. An endpoint that uses 2 CPUs simultaneously for 1 second is equal to \`compute_time=2\`.
`,
            type: 'integer',
            format: 'int64',
            minimum: 0
        },
        active_time_seconds: {
            description: `Seconds. Control plane observed endpoints of this project being active this amount of wall-clock time.
The value has some lag.
The value is reset at the beginning of each billing period.
`,
            type: 'integer',
            format: 'int64',
            minimum: 0
        },
        cpu_used_sec: {
            description: `DEPRECATED, use compute_time instead.
`,
            type: 'integer',
            format: 'int64',
            deprecated: true
        },
        id: {
            description: `The project ID
`,
            type: 'string'
        },
        platform_id: {
            description: `The cloud platform identifier. Currently, only AWS is supported, for which the identifier is \`aws\`.
`,
            type: 'string'
        },
        region_id: {
            description: `The region identifier
`,
            type: 'string'
        },
        name: {
            description: `The project name
`,
            type: 'string'
        },
        provisioner: {
            '$ref': '#/components/schemas/Provisioner'
        },
        default_endpoint_settings: {
            '$ref': '#/components/schemas/DefaultEndpointSettings'
        },
        settings: {
            '$ref': '#/components/schemas/ProjectSettingsData'
        },
        pg_version: {
            '$ref': '#/components/schemas/PgVersion'
        },
        proxy_host: {
            description: `The proxy host for the project. This value combines the \`region_id\`, the \`platform_id\`, and the Neon domain (\`neon.tech\`).
`,
            type: 'string'
        },
        branch_logical_size_limit: {
            description: `The logical size limit for a branch. The value is in MiB.
`,
            type: 'integer',
            format: 'int64'
        },
        branch_logical_size_limit_bytes: {
            description: `The logical size limit for a branch. The value is in B.
`,
            type: 'integer',
            format: 'int64'
        },
        store_passwords: {
            description: `Whether or not passwords are stored for roles in the Neon project. Storing passwords facilitates access to Neon features that require authorization.
`,
            type: 'boolean'
        },
        maintenance_starts_at: {
            description: `A timestamp indicating when project maintenance begins. If set, the project is placed into maintenance mode at this time.
`,
            type: 'string',
            format: 'date-time'
        },
        creation_source: {
            description: `The project creation source
`,
            type: 'string'
        },
        history_retention_seconds: {
            description: `The number of seconds to retain point-in-time restore (PITR) backup history for this project.
`,
            type: 'integer',
            format: 'int32'
        },
        created_at: {
            description: `A timestamp indicating when the project was created
`,
            type: 'string',
            format: 'date-time'
        },
        updated_at: {
            description: `A timestamp indicating when the project was last updated
`,
            type: 'string',
            format: 'date-time'
        },
        synthetic_storage_size: {
            description: `The current space occupied by the project in storage, in bytes. Synthetic storage size combines the logical data size and Write-Ahead Log (WAL) size for all branches in a project.
`,
            type: 'integer',
            format: 'int64'
        },
        consumption_period_start: {
            description: `A date-time indicating when Neon Cloud started measuring consumption for current consumption period.
`,
            type: 'string',
            format: 'date-time'
        },
        consumption_period_end: {
            description: `A date-time indicating when Neon Cloud plans to stop measuring consumption for current consumption period.
`,
            type: 'string',
            format: 'date-time'
        },
        quota_reset_at: {
            deprecated: true,
            description: `DEPRECATED. Use \`consumption_period_end\` from the getProject endpoint instead.
A timestamp indicating when the project quota resets.
`,
            type: 'string',
            format: 'date-time'
        },
        owner_id: {
            type: 'string'
        },
        owner: {
            '$ref': '#/components/schemas/ProjectOwnerData'
        },
        compute_last_active_at: {
            description: `The most recent time when any endpoint of this project was active.

Omitted when observed no actitivy for endpoints of this project.
`,
            type: 'string',
            format: 'date-time'
        },
        org_id: {
            type: 'string'
        }
    },
    example: {
        id: 'spring-example-302709',
        platform_id: 'aws',
        region_id: 'aws-us-east-2',
        name: 'spring-example-302709',
        provisioner: 'k8s-pod',
        pg_version: 15,
        proxy_host: 'us-east-2.aws.neon.tech',
        store_passwords: true,
        creation_source: 'console',
        history_retention_seconds: 604800,
        created_at: '2022-12-13T01:30:55Z',
        updated_at: '2022-12-13T01:30:55Z',
        owner: {
            email: 'some@email.com',
            branches_limit: 10,
            subscription_type: 'scale'
        },
        org_id: 'org-morning-bread-81040908'
    }
} as const;

export const $ProjectCreateRequest = {
    type: 'object',
    required: ['project'],
    properties: {
        project: {
            type: 'object',
            properties: {
                settings: {
                    '$ref': '#/components/schemas/ProjectSettingsData'
                },
                name: {
                    description: 'The project name',
                    type: 'string'
                },
                branch: {
                    type: 'object',
                    properties: {
                        name: {
                            description: `The branch name. If not specified, the default branch name will be used.
`,
                            type: 'string'
                        },
                        role_name: {
                            description: `The role name. If not specified, the default role name will be used.
`,
                            type: 'string'
                        },
                        database_name: {
                            description: `The database name. If not specified, the default database name will be used.
`,
                            type: 'string'
                        }
                    }
                },
                autoscaling_limit_min_cu: {
                    deprecated: true,
                    description: `DEPRECATED, use default_endpoint_settings.autoscaling_limit_min_cu instead.

The minimum number of Compute Units. The minimum value is \`0.25\`.
See [Compute size and Autoscaling configuration](https://neon.tech/docs/manage/endpoints#compute-size-and-autoscaling-configuration)
for more information.
`,
                    '$ref': '#/components/schemas/ComputeUnit'
                },
                autoscaling_limit_max_cu: {
                    deprecated: true,
                    description: `DEPRECATED, use default_endpoint_settings.autoscaling_limit_max_cu instead.

The maximum number of Compute Units. See [Compute size and Autoscaling configuration](https://neon.tech/docs/manage/endpoints#compute-size-and-autoscaling-configuration)
for more information.
`,
                    '$ref': '#/components/schemas/ComputeUnit'
                },
                provisioner: {
                    '$ref': '#/components/schemas/Provisioner'
                },
                region_id: {
                    description: `The region identifier. Refer to our [Regions](https://neon.tech/docs/introduction/regions) documentation for supported regions. Values are specified in this format: \`aws-us-east-1\`
`,
                    type: 'string'
                },
                default_endpoint_settings: {
                    '$ref': '#/components/schemas/DefaultEndpointSettings'
                },
                pg_version: {
                    '$ref': '#/components/schemas/PgVersion'
                },
                store_passwords: {
                    description: `Whether or not passwords are stored for roles in the Neon project. Storing passwords facilitates access to Neon features that require authorization.
`,
                    type: 'boolean'
                },
                history_retention_seconds: {
                    description: `The number of seconds to retain the point-in-time restore (PITR) backup history for this project.
The default is 604800 seconds (7 days).
`,
                    type: 'integer',
                    format: 'int32',
                    minimum: 0,
                    maximum: 2592000
                },
                org_id: {
                    type: 'string',
                    description: `Organization id in case the project created belongs to an organization.
If not present, project is owned by a user and not by org.
`
                }
            }
        }
    }
} as const;

export const $ProjectUpdateRequest = {
    type: 'object',
    required: ['project'],
    properties: {
        project: {
            type: 'object',
            properties: {
                settings: {
                    '$ref': '#/components/schemas/ProjectSettingsData'
                },
                name: {
                    description: 'The project name',
                    type: 'string'
                },
                default_endpoint_settings: {
                    '$ref': '#/components/schemas/DefaultEndpointSettings'
                },
                history_retention_seconds: {
                    description: `The number of seconds to retain the point-in-time restore (PITR) backup history for this project.
The default is 604800 seconds (7 days).
`,
                    type: 'integer',
                    format: 'int32',
                    minimum: 0,
                    maximum: 2592000
                }
            }
        }
    }
} as const;

export const $ProjectSettingsData = {
    type: 'object',
    properties: {
        quota: {
            '$ref': '#/components/schemas/ProjectQuota'
        },
        allowed_ips: {
            '$ref': '#/components/schemas/AllowedIps'
        },
        enable_logical_replication: {
            description: `Sets wal_level=logical for all compute endpoints in this project.
All active endpoints will be suspended.
Once enabled, logical replication cannot be disabled.
`,
            type: 'boolean'
        }
    }
} as const;

export const $ProjectResponse = {
    type: 'object',
    required: ['project'],
    properties: {
        project: {
            '$ref': '#/components/schemas/Project'
        }
    }
} as const;

export const $ProjectsResponse = {
    type: 'object',
    required: ['projects'],
    properties: {
        projects: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ProjectListItem'
            }
        }
    }
} as const;

export const $ProjectPermission = {
    type: 'object',
    required: ['id', 'granted_to_email', 'granted_at'],
    properties: {
        id: {
            type: 'string'
        },
        granted_to_email: {
            type: 'string'
        },
        granted_at: {
            type: 'string',
            format: 'date-time'
        },
        revoked_at: {
            type: 'string',
            format: 'date-time'
        }
    }
} as const;

export const $ProjectPermissions = {
    type: 'object',
    required: ['project_permissions'],
    properties: {
        project_permissions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ProjectPermission'
            }
        }
    }
} as const;

export const $GrantPermissionToProjectRequest = {
    type: 'object',
    required: ['email'],
    properties: {
        email: {
            type: 'string'
        }
    }
} as const;

export const $ConsumptionHistoryPerAccountResponse = {
    type: 'object',
    properties: {
        periods: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ConsumptionHistoryPerPeriod'
            }
        }
    },
    required: ['periods']
} as const;

export const $ConsumptionHistoryPerProjectResponse = {
    type: 'object',
    properties: {
        projects: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ConsumptionHistoryPerProject'
            }
        }
    },
    required: ['projects']
} as const;

export const $ConsumptionHistoryPerProject = {
    type: 'object',
    properties: {
        project_id: {
            type: 'string'
        },
        periods: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ConsumptionHistoryPerPeriod'
            }
        }
    },
    required: ['project_id', 'periods']
} as const;

export const $ConsumptionHistoryPerPeriod = {
    type: 'object',
    properties: {
        period_id: {
            type: 'string',
            format: 'uuid'
        },
        consumption: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ConsumptionHistoryPerTimeframe'
            }
        }
    },
    required: ['period_id', 'consumption'],
    example: {
        period_id: '79ec829f-1828-4006-ac82-9f1828a0067d',
        consumption: [
            {
                timeframe_start: '2024-03-22T00:00:00Z',
                timeframe_end: '2024-03-23T00:00:00Z',
                active_time_seconds: 27853,
                compute_time_seconds: 18346,
                written_data_bytes: 1073741824,
                synthetic_storage_size_bytes: 5368709120
            },
            {
                timeframe_start: '2024-03-23T00:00:00Z',
                timeframe_end: '2024-03-24T00:00:00Z',
                active_time_seconds: 17498,
                compute_time_seconds: 3378,
                written_data_bytes: 5741824,
                synthetic_storage_size_bytes: 2370912
            }
        ]
    }
} as const;

export const $ConsumptionHistoryPerTimeframe = {
    type: 'object',
    properties: {
        timeframe_start: {
            type: 'string',
            format: 'date-time'
        },
        timeframe_end: {
            type: 'string',
            format: 'date-time'
        },
        active_time_seconds: {
            type: 'integer',
            format: 'uint64'
        },
        compute_time_seconds: {
            type: 'integer',
            format: 'uint64'
        },
        written_data_bytes: {
            type: 'integer',
            format: 'uint64'
        },
        synthetic_storage_size_bytes: {
            type: 'integer',
            format: 'uint64'
        },
        data_storage_bytes_hour: {
            type: 'integer',
            format: 'uint64'
        }
    },
    required: ['timeframe_start', 'timeframe_end', 'active_time_seconds', 'compute_time_seconds', 'written_data_bytes', 'synthetic_storage_size_bytes']
} as const;

export const $ConsumptionHistoryGranularity = {
    type: 'string',
    enum: ['hourly', 'daily', 'monthly']
} as const;

export const $ProjectsConsumptionResponse = {
    type: 'object',
    required: ['projects', 'periods_in_response'],
    properties: {
        projects: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ProjectConsumption'
            }
        },
        periods_in_response: {
            type: 'integer',
            format: 'int64'
        }
    }
} as const;

export const $ProjectConsumption = {
    type: 'object',
    required: ['period_id', 'previous_period_id', 'project_id', 'active_time_seconds', 'compute_time_seconds', 'written_data_bytes', 'data_transfer_bytes', 'data_storage_bytes_hour', 'synthetic_storage_size', 'updated_at', 'period_start', 'period_end'],
    properties: {
        project_id: {
            description: 'The project ID',
            type: 'string'
        },
        period_id: {
            description: `The Id of the consumption period, used to reference the \`previous_period_id\` field.
`,
            type: 'string',
            format: 'uuid'
        },
        data_storage_bytes_hour: {
            description: `Bytes-Hour. The amount of storage the project consumed during the billing period. Expect some lag in the reported value.
The value is reset at the beginning of each billing period.
`,
            type: 'integer',
            format: 'int64',
            minimum: 0
        },
        data_storage_bytes_hour_updated_at: {
            description: `The timestamp of the last update of the \`data_storage_bytes_hour\` field.
`,
            type: 'string',
            format: 'date-time'
        },
        synthetic_storage_size: {
            description: `Bytes. The current space occupied by project in storage. Expect some lag in the reported value.
`,
            type: 'integer',
            format: 'int64',
            minimum: 0
        },
        synthetic_storage_size_updated_at: {
            description: `The timestamp of the last update of the \`synthetic_storage_size\` field.
`,
            type: 'string',
            format: 'date-time'
        },
        data_transfer_bytes: {
            description: `Bytes. The egress traffic from the Neon cloud to the client for the project over the billing period.
Includes egress traffic for deleted endpoints. Expect some lag in the reported value. The value is reset at the beginning of each billing period.
`,
            type: 'integer',
            format: 'int64',
            minimum: 0
        },
        data_transfer_bytes_updated_at: {
            description: `Timestamp of the last update of \`data_transfer_bytes\` field
`,
            type: 'string',
            format: 'date-time'
        },
        written_data_bytes: {
            description: `Bytes. The Amount of WAL that travelled through storage for given project for all branches.
Expect some lag in the reported value. The value is reset at the beginning of each billing period.
`,
            type: 'integer',
            format: 'int64',
            minimum: 0
        },
        written_data_bytes_updated_at: {
            description: `The timestamp of the last update of \`written_data_bytes\` field.
`,
            type: 'string',
            format: 'date-time'
        },
        compute_time_seconds: {
            description: `Seconds. The number of CPU seconds used by the project's compute endpoints, including compute endpoints that have been deleted.
Expect some lag in the reported value. The value is reset at the beginning of each billing period.
Examples:
1. An endpoint that uses 1 CPU for 1 second is equal to \`compute_time=1\`.
2. An endpoint that uses 2 CPUs simultaneously for 1 second is equal to \`compute_time=2\`.
`,
            type: 'integer',
            format: 'int64',
            minimum: 0
        },
        compute_time_seconds_updated_at: {
            description: `The timestamp of the last update of \`compute_time_seconds\` field.
`,
            type: 'string',
            format: 'date-time'
        },
        active_time_seconds: {
            description: `Seconds. The amount of time that compute endpoints in this project have been active.
Expect some lag in the reported value.

The value is reset at the beginning of each billing period.
`,
            type: 'integer',
            format: 'int64',
            minimum: 0
        },
        active_time_seconds_updated_at: {
            description: `The timestamp of the last update of the \`active_time_seconds\` field.
`,
            type: 'string',
            format: 'date-time'
        },
        updated_at: {
            description: `A timestamp indicating when the period was last updated.
`,
            type: 'string',
            format: 'date-time'
        },
        period_start: {
            description: `The start of the consumption period.
`,
            type: 'string',
            format: 'date-time'
        },
        period_end: {
            description: `The end of the consumption period.
`,
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        previous_period_id: {
            description: `The \`period_id\` of the previous consumption period.
`,
            type: 'string',
            format: 'uuid',
            nullable: true
        }
    }
} as const;

export const $ProjectLimits = {
    type: 'object',
    required: ['limits', 'features'],
    properties: {
        limits: {
            type: 'object',
            required: ['active_time', 'max_projects', 'max_branches', 'max_protected_branches', 'max_autoscaling_cu', 'cpu_seconds', 'max_compute_time_non_primary', 'max_active_endpoints', 'max_read_only_endpoints', 'max_allowed_ips', 'max_monitoring_retention_hours', 'min_autosuspend_seconds', 'max_data_transfer'],
            properties: {
                active_time: {
                    type: 'integer',
                    format: 'int64'
                },
                max_projects: {
                    type: 'integer'
                },
                max_branches: {
                    type: 'integer'
                },
                max_protected_branches: {
                    type: 'integer'
                },
                max_autoscaling_cu: {
                    type: 'number',
                    format: 'float64'
                },
                cpu_seconds: {
                    type: 'integer',
                    format: 'int64'
                },
                max_compute_time_non_primary: {
                    type: 'integer',
                    format: 'int64'
                },
                max_active_endpoints: {
                    type: 'integer'
                },
                max_read_only_endpoints: {
                    type: 'integer'
                },
                max_allowed_ips: {
                    type: 'integer'
                },
                max_monitoring_retention_hours: {
                    type: 'integer'
                },
                min_autosuspend_seconds: {
                    type: 'integer'
                },
                max_data_transfer: {
                    type: 'integer',
                    format: 'int64'
                }
            }
        },
        features: {
            '$ref': '#/components/schemas/Features'
        }
    }
} as const;

export const $Branch = {
    type: 'object',
    required: ['id', 'project_id', 'name', 'current_state', 'creation_source', 'created_at', 'updated_at', 'primary', 'default', 'protected', 'cpu_used_sec', 'active_time_seconds', 'compute_time_seconds', 'written_data_bytes', 'data_transfer_bytes'],
    properties: {
        id: {
            description: `The branch ID. This value is generated when a branch is created. A \`branch_id\` value has a \`br\` prefix. For example: \`br-small-term-683261\`.
`,
            type: 'string'
        },
        project_id: {
            description: `The ID of the project to which the branch belongs
`,
            type: 'string'
        },
        parent_id: {
            description: `The \`branch_id\` of the parent branch
`,
            type: 'string'
        },
        parent_lsn: {
            description: `The Log Sequence Number (LSN) on the parent branch from which this branch was created
`,
            type: 'string'
        },
        parent_timestamp: {
            description: `The point in time on the parent branch from which this branch was created
`,
            type: 'string',
            format: 'date-time'
        },
        name: {
            description: `The branch name
`,
            type: 'string'
        },
        current_state: {
            '$ref': '#/components/schemas/BranchState'
        },
        pending_state: {
            '$ref': '#/components/schemas/BranchState'
        },
        logical_size: {
            description: `The logical size of the branch, in bytes
`,
            type: 'integer',
            format: 'int64'
        },
        creation_source: {
            description: `The branch creation source
`,
            type: 'string'
        },
        primary: {
            deprecated: true,
            description: `DEPRECATED. Use \`default\` field.
Whether the branch is the project's primary branch
`,
            type: 'boolean'
        },
        default: {
            description: `Whether the branch is the project's default branch
`,
            type: 'boolean'
        },
        protected: {
            description: `Whether the branch is protected
`,
            type: 'boolean'
        },
        cpu_used_sec: {
            deprecated: true,
            description: `CPU seconds used by all of the branch's compute endpoints, including deleted ones.
This value is reset at the beginning of each billing period.
Examples:
1. A branch that uses 1 CPU for 1 second is equal to \`cpu_used_sec=1\`.
2. A branch that uses 2 CPUs simultaneously for 1 second is equal to \`cpu_used_sec=2\`.
`,
            type: 'integer',
            format: 'int64'
        },
        compute_time_seconds: {
            type: 'integer',
            format: 'int64'
        },
        active_time_seconds: {
            type: 'integer',
            format: 'int64'
        },
        written_data_bytes: {
            type: 'integer',
            format: 'int64'
        },
        data_transfer_bytes: {
            type: 'integer',
            format: 'int64'
        },
        created_at: {
            description: `A timestamp indicating when the branch was created
`,
            type: 'string',
            format: 'date-time'
        },
        updated_at: {
            description: `A timestamp indicating when the branch was last updated
`,
            type: 'string',
            format: 'date-time'
        },
        last_reset_at: {
            description: `A timestamp indicating when the branch was last reset
`,
            type: 'string',
            format: 'date-time'
        }
    },
    example: {
        id: 'br-wispy-meadow-118737',
        project_id: 'spring-example-302709',
        parent_id: 'br-aged-salad-637688',
        parent_lsn: '0/1DE2850',
        name: 'dev2',
        protected: false,
        current_state: 'ready',
        creation_source: 'console',
        created_at: '2022-11-30T19:09:48Z',
        updated_at: '2022-12-01T19:53:05Z',
        primary: true,
        default: true
    }
} as const;

export const $BranchState = {
    description: 'The branch state',
    type: 'string',
    enum: ['init', 'ready']
} as const;

export const $BranchCreateRequestEndpointOptions = {
    type: 'object',
    required: ['type'],
    properties: {
        type: {
            '$ref': '#/components/schemas/EndpointType'
        },
        autoscaling_limit_min_cu: {
            description: `The minimum number of Compute Units. The minimum value is \`0.25\`.
    See [Compute size and Autoscaling configuration](https://neon.tech/docs/manage/endpoints#compute-size-and-autoscaling-configuration)
    for more information.
`,
            '$ref': '#/components/schemas/ComputeUnit'
        },
        autoscaling_limit_max_cu: {
            description: `The maximum number of Compute Units.
    See [Compute size and Autoscaling configuration](https://neon.tech/docs/manage/endpoints#compute-size-and-autoscaling-configuration)
    for more information.
`,
            '$ref': '#/components/schemas/ComputeUnit'
        },
        provisioner: {
            '$ref': '#/components/schemas/Provisioner'
        },
        suspend_timeout_seconds: {
            '$ref': '#/components/schemas/SuspendTimeoutSeconds'
        }
    }
} as const;

export const $BranchCreateRequest = {
    type: 'object',
    properties: {
        endpoints: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/BranchCreateRequestEndpointOptions'
            }
        },
        branch: {
            type: 'object',
            properties: {
                parent_id: {
                    description: `The \`branch_id\` of the parent branch. If omitted or empty, the branch will be created from the project's default branch.
`,
                    type: 'string'
                },
                name: {
                    description: `The branch name
`,
                    type: 'string'
                },
                parent_lsn: {
                    description: `A Log Sequence Number (LSN) on the parent branch. The branch will be created with data from this LSN.
`,
                    type: 'string'
                },
                parent_timestamp: {
                    description: `A timestamp identifying a point in time on the parent branch. The branch will be created with data starting from this point in time.
The timestamp must be provided in ISO 8601 format; for example: \`2024-02-26T12:00:00Z\`.
`,
                    type: 'string',
                    format: 'date-time'
                },
                protected: {
                    description: `Whether the branch is protected
`,
                    type: 'boolean'
                }
            }
        }
    }
} as const;

export const $BranchUpdateRequest = {
    type: 'object',
    required: ['branch'],
    properties: {
        branch: {
            type: 'object',
            properties: {
                name: {
                    type: 'string'
                },
                protected: {
                    type: 'boolean'
                }
            }
        }
    }
} as const;

export const $BranchRestoreRequest = {
    type: 'object',
    required: ['source_branch_id'],
    properties: {
        source_branch_id: {
            type: 'string',
            description: `The \`branch_id\` of the restore source branch.
If \`source_timestamp\` and \`source_lsn\` are omitted, the branch will be restored to head.
If \`source_branch_id\` is equal to the branch's id, \`source_timestamp\` or \`source_lsn\` is required.
`
        },
        source_lsn: {
            description: `A Log Sequence Number (LSN) on the source branch. The branch will be restored with data from this LSN.
`,
            type: 'string'
        },
        source_timestamp: {
            description: `A timestamp identifying a point in time on the source branch. The branch will be restored with data starting from this point in time.
The timestamp must be provided in ISO 8601 format; for example: \`2024-02-26T12:00:00Z\`.
`,
            type: 'string',
            format: 'date-time'
        },
        preserve_under_name: {
            description: `If not empty, the previous state of the branch will be saved to a branch with this name.
If the branch has children or the \`source_branch_id\` is equal to the branch id, this field is required. All existing child branches will be moved to the newly created branch under the name \`preserve_under_name\`.
`,
            type: 'string'
        }
    }
} as const;

export const $BranchResponse = {
    type: 'object',
    required: ['branch'],
    properties: {
        branch: {
            '$ref': '#/components/schemas/Branch'
        }
    }
} as const;

export const $BranchSchemaResponse = {
    type: 'object',
    properties: {
        sql: {
            type: 'string'
        }
    }
} as const;

export const $BranchesResponse = {
    type: 'object',
    required: ['branches'],
    properties: {
        branches: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Branch'
            }
        }
    }
} as const;

export const $ConnectionParameters = {
    type: 'object',
    required: ['database', 'password', 'role', 'host', 'pooler_host'],
    properties: {
        database: {
            description: `Database name
`,
            type: 'string'
        },
        password: {
            description: `Password for the role
`,
            type: 'string'
        },
        role: {
            description: `Role name
`,
            type: 'string'
        },
        host: {
            description: `Hostname
`,
            type: 'string'
        },
        pooler_host: {
            description: `Pooler hostname
`,
            type: 'string'
        }
    }
} as const;

export const $ConnectionDetails = {
    type: 'object',
    required: ['connection_uri', 'connection_parameters'],
    properties: {
        connection_uri: {
            description: `The connection URI is defined as specified here: [Connection URIs](https://www.postgresql.org/docs/current/libpq-connect.html#LIBPQ-CONNSTRING-URIS)
The connection URI can be used to connect to a Postgres database with psql or defined in a DATABASE_URL environment variable.
`,
            type: 'string'
        },
        connection_parameters: {
            '$ref': '#/components/schemas/ConnectionParameters'
        }
    }
} as const;

export const $ConnectionURIResponse = {
    type: 'object',
    required: ['uri'],
    properties: {
        uri: {
            description: `The connection URI.
`,
            type: 'string'
        }
    }
} as const;

export const $Endpoint = {
    type: 'object',
    required: ['host', 'id', 'project_id', 'branch_id', 'region_id', 'autoscaling_limit_max_cu', 'autoscaling_limit_min_cu', 'type', 'current_state', 'pooler_enabled', 'pooler_mode', 'disabled', 'passwordless_access', 'creation_source', 'created_at', 'updated_at', 'settings', 'proxy_host', 'suspend_timeout_seconds', 'provisioner'],
    properties: {
        host: {
            description: `The hostname of the compute endpoint. This is the hostname specified when connecting to a Neon database.
`,
            type: 'string'
        },
        id: {
            description: `The compute endpoint ID. Compute endpoint IDs have an \`ep-\` prefix. For example: \`ep-little-smoke-851426\`
`,
            type: 'string'
        },
        project_id: {
            description: `The ID of the project to which the compute endpoint belongs
`,
            type: 'string'
        },
        branch_id: {
            description: `The ID of the branch that the compute endpoint is associated with
`,
            type: 'string'
        },
        autoscaling_limit_min_cu: {
            description: `The minimum number of Compute Units
`,
            '$ref': '#/components/schemas/ComputeUnit'
        },
        autoscaling_limit_max_cu: {
            description: `The maximum number of Compute Units
`,
            '$ref': '#/components/schemas/ComputeUnit'
        },
        region_id: {
            type: 'string',
            description: `The region identifier
`
        },
        type: {
            '$ref': '#/components/schemas/EndpointType'
        },
        current_state: {
            '$ref': '#/components/schemas/EndpointState'
        },
        pending_state: {
            '$ref': '#/components/schemas/EndpointState'
        },
        settings: {
            '$ref': '#/components/schemas/EndpointSettingsData'
        },
        pooler_enabled: {
            description: `Whether connection pooling is enabled for the compute endpoint
`,
            type: 'boolean'
        },
        pooler_mode: {
            '$ref': '#/components/schemas/EndpointPoolerMode'
        },
        disabled: {
            description: `Whether to restrict connections to the compute endpoint.
Enabling this option schedules a suspend compute operation.
A disabled compute endpoint cannot be enabled by a connection or
console action. However, the compute endpoint is periodically
enabled by check_availability operations.
`,
            type: 'boolean'
        },
        passwordless_access: {
            description: `Whether to permit passwordless access to the compute endpoint
`,
            type: 'boolean'
        },
        last_active: {
            description: `A timestamp indicating when the compute endpoint was last active
`,
            type: 'string',
            format: 'date-time'
        },
        creation_source: {
            description: `The compute endpoint creation source
`,
            type: 'string'
        },
        created_at: {
            description: `A timestamp indicating when the compute endpoint was created
`,
            type: 'string',
            format: 'date-time'
        },
        updated_at: {
            description: `A timestamp indicating when the compute endpoint was last updated
`,
            type: 'string',
            format: 'date-time'
        },
        proxy_host: {
            description: `DEPRECATED. Use the "host" property instead.
`,
            type: 'string'
        },
        suspend_timeout_seconds: {
            '$ref': '#/components/schemas/SuspendTimeoutSeconds'
        },
        provisioner: {
            '$ref': '#/components/schemas/Provisioner'
        },
        compute_release_version: {
            description: `Attached compute's release version number.
`,
            type: 'string'
        }
    },
    example: {
        host: 'ep-silent-smoke-806639.us-east-2.aws.neon.tech',
        id: 'ep-silent-smoke-806639',
        project_id: 'spring-example-302709',
        branch_id: 'br-wispy-meadow-118737',
        autoscaling_limit_min_cu: 1,
        autoscaling_limit_max_cu: 1,
        region_id: 'aws-us-east-2',
        type: 'read_write',
        current_state: 'init',
        pending_state: 'active',
        settings: {
            pg_settings: {}
        },
        pooler_enabled: false,
        pooler_mode: 'transaction',
        disabled: false,
        passwordless_access: true,
        creation_source: 'console',
        created_at: '2022-12-03T15:37:07Z',
        updated_at: '2022-12-03T15:37:07Z',
        proxy_host: 'us-east-2.aws.neon.tech',
        suspend_timeout_seconds: 0
    }
} as const;

export const $EndpointState = {
    description: `The state of the compute endpoint
`,
    type: 'string',
    enum: ['init', 'active', 'idle']
} as const;

export const $EndpointType = {
    description: `The compute endpoint type. Either \`read_write\` or \`read_only\`.
The \`read_only\` compute endpoint type is not yet supported.
`,
    type: 'string',
    enum: ['read_only', 'read_write']
} as const;

export const $EndpointPoolerMode = {
    description: `The connection pooler mode. Neon supports PgBouncer in \`transaction\` mode only.
`,
    type: 'string',
    enum: ['transaction']
} as const;

export const $SuspendTimeoutSeconds = {
    description: `Duration of inactivity in seconds after which the compute endpoint is
automatically suspended. The value \`0\` means use the global default.
The value \`-1\` means never suspend. The default value is \`300\` seconds (5 minutes).
The minimum value is \`60\` seconds (1 minute).
The maximum value is \`604800\` seconds (1 week). For more information, see
[Auto-suspend configuration](https://neon.tech/docs/manage/endpoints#auto-suspend-configuration).
`,
    type: 'integer',
    format: 'int64',
    minimum: -1,
    maximum: 604800
} as const;

export const $AllowedIps = {
    description: `A list of IP addresses that are allowed to connect to the compute endpoint.
If the list is empty or not set, all IP addresses are allowed.
If protected_branches_only is true, the list will be applied only to protected branches.
`,
    type: 'object',
    properties: {
        ips: {
            description: 'A list of IP addresses that are allowed to connect to the endpoint.',
            type: 'array',
            items: {
                type: 'string'
            }
        },
        protected_branches_only: {
            description: 'If true, the list will be applied only to protected branches.',
            type: 'boolean'
        },
        primary_branch_only: {
            description: 'If true, the list will be applied only to the default branch.',
            type: 'boolean'
        }
    }
} as const;

export const $EndpointCreateRequest = {
    type: 'object',
    required: ['endpoint'],
    properties: {
        endpoint: {
            type: 'object',
            required: ['branch_id', 'type'],
            properties: {
                branch_id: {
                    description: `The ID of the branch the compute endpoint will be associated with
`,
                    type: 'string'
                },
                region_id: {
                    description: `The region where the compute endpoint will be created. Only the project's \`region_id\` is permitted.
`,
                    type: 'string'
                },
                type: {
                    '$ref': '#/components/schemas/EndpointType'
                },
                settings: {
                    '$ref': '#/components/schemas/EndpointSettingsData'
                },
                autoscaling_limit_min_cu: {
                    description: `The minimum number of Compute Units. The minimum value is \`0.25\`.
See [Compute size and Autoscaling configuration](https://neon.tech/docs/manage/endpoints#compute-size-and-autoscaling-configuration)
for more information.
`,
                    '$ref': '#/components/schemas/ComputeUnit'
                },
                autoscaling_limit_max_cu: {
                    description: `The maximum number of Compute Units.
See [Compute size and Autoscaling configuration](https://neon.tech/docs/manage/endpoints#compute-size-and-autoscaling-configuration)
for more information.
`,
                    '$ref': '#/components/schemas/ComputeUnit'
                },
                provisioner: {
                    '$ref': '#/components/schemas/Provisioner'
                },
                pooler_enabled: {
                    deprecated: true,
                    description: `Whether to enable connection pooling for the compute endpoint
`,
                    type: 'boolean'
                },
                pooler_mode: {
                    '$ref': '#/components/schemas/EndpointPoolerMode'
                },
                disabled: {
                    type: 'boolean',
                    description: `Whether to restrict connections to the compute endpoint.
Enabling this option schedules a suspend compute operation.
A disabled compute endpoint cannot be enabled by a connection or
console action. However, the compute endpoint is periodically
enabled by check_availability operations.
`
                },
                passwordless_access: {
                    type: 'boolean',
                    description: `NOT YET IMPLEMENTED. Whether to permit passwordless access to the compute endpoint.
`
                },
                suspend_timeout_seconds: {
                    '$ref': '#/components/schemas/SuspendTimeoutSeconds'
                }
            }
        }
    }
} as const;

export const $EndpointUpdateRequest = {
    type: 'object',
    required: ['endpoint'],
    properties: {
        endpoint: {
            type: 'object',
            properties: {
                branch_id: {
                    description: `The destination branch ID. The destination branch must not have an exsiting read-write endpoint.
`,
                    type: 'string'
                },
                autoscaling_limit_min_cu: {
                    description: `The minimum number of Compute Units. The minimum value is \`0.25\`.
See [Compute size and Autoscaling configuration](https://neon.tech/docs/manage/endpoints#compute-size-and-autoscaling-configuration)
for more information.
`,
                    '$ref': '#/components/schemas/ComputeUnit'
                },
                autoscaling_limit_max_cu: {
                    description: `The maximum number of Compute Units.
See [Compute size and Autoscaling configuration](https://neon.tech/docs/manage/endpoints#compute-size-and-autoscaling-configuration)
for more information.
`,
                    '$ref': '#/components/schemas/ComputeUnit'
                },
                provisioner: {
                    '$ref': '#/components/schemas/Provisioner'
                },
                settings: {
                    '$ref': '#/components/schemas/EndpointSettingsData'
                },
                pooler_enabled: {
                    deprecated: true,
                    description: `Whether to enable connection pooling for the compute endpoint
`,
                    type: 'boolean'
                },
                pooler_mode: {
                    '$ref': '#/components/schemas/EndpointPoolerMode'
                },
                disabled: {
                    description: `Whether to restrict connections to the compute endpoint.
Enabling this option schedules a suspend compute operation.
A disabled compute endpoint cannot be enabled by a connection or
console action. However, the compute endpoint is periodically
enabled by check_availability operations.
`,
                    type: 'boolean'
                },
                passwordless_access: {
                    description: `NOT YET IMPLEMENTED. Whether to permit passwordless access to the compute endpoint.
`,
                    type: 'boolean'
                },
                suspend_timeout_seconds: {
                    '$ref': '#/components/schemas/SuspendTimeoutSeconds'
                }
            }
        }
    }
} as const;

export const $EndpointResponse = {
    type: 'object',
    required: ['endpoint'],
    properties: {
        endpoint: {
            '$ref': '#/components/schemas/Endpoint'
        }
    }
} as const;

export const $ConnectionURIsResponse = {
    type: 'object',
    required: ['connection_uris'],
    properties: {
        connection_uris: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ConnectionDetails'
            }
        }
    }
} as const;

export const $ConnectionURIsOptionalResponse = {
    type: 'object',
    properties: {
        connection_uris: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ConnectionDetails'
            }
        }
    }
} as const;

export const $EndpointsResponse = {
    type: 'object',
    required: ['endpoints'],
    properties: {
        endpoints: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Endpoint'
            }
        }
    }
} as const;

export const $EndpointPasswordlessSessionAuthRequest = {
    type: 'object',
    required: ['session_id'],
    properties: {
        session_id: {
            type: 'string'
        }
    }
} as const;

export const $Duration = {
    description: `A Duration represents the elapsed time between two instants
as an int64 nanosecond count. The representation limits the
largest representable duration to approximately 290 years.`,
    type: 'integer',
    format: 'int64'
} as const;

export const $StatementResult = {
    type: 'object',
    required: ['query'],
    properties: {
        data: {
            '$ref': '#/components/schemas/StatementData'
        },
        error: {
            type: 'string'
        },
        explain_data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ExplainData'
            }
        },
        query: {
            type: 'string'
        }
    }
} as const;

export const $StatementData = {
    type: 'object',
    required: ['truncated'],
    properties: {
        fields: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        rows: {
            type: 'array',
            items: {
                type: 'array',
                items: {
                    type: 'string'
                }
            }
        },
        truncated: {
            type: 'boolean'
        }
    }
} as const;

export const $ExplainData = {
    type: 'object',
    required: ['QUERY PLAN'],
    properties: {
        'QUERY PLAN': {
            type: 'string'
        }
    }
} as const;

export const $Role = {
    type: 'object',
    required: ['branch_id', 'name', 'created_at', 'updated_at'],
    properties: {
        branch_id: {
            description: `The ID of the branch to which the role belongs
`,
            type: 'string'
        },
        name: {
            description: `The role name
`,
            type: 'string'
        },
        password: {
            description: `The role password
`,
            type: 'string'
        },
        protected: {
            description: `Whether or not the role is system-protected
`,
            type: 'boolean'
        },
        created_at: {
            description: `A timestamp indicating when the role was created
`,
            type: 'string',
            format: 'date-time'
        },
        updated_at: {
            description: `A timestamp indicating when the role was last updated
`,
            type: 'string',
            format: 'date-time'
        }
    },
    example: {
        branch_id: 'br-wispy-meadow-118737',
        name: 'casey',
        protected: false,
        created_at: '2022-11-23T17:42:25Z',
        updated_at: '2022-11-23T17:42:25Z'
    }
} as const;

export const $RoleCreateRequest = {
    type: 'object',
    required: ['role'],
    properties: {
        role: {
            type: 'object',
            required: ['name'],
            properties: {
                name: {
                    description: `The role name. Cannot exceed 63 bytes in length.
`,
                    type: 'string'
                }
            }
        }
    }
} as const;

export const $RoleResponse = {
    type: 'object',
    required: ['role'],
    properties: {
        role: {
            '$ref': '#/components/schemas/Role'
        }
    }
} as const;

export const $RolesResponse = {
    type: 'object',
    required: ['roles'],
    properties: {
        roles: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Role'
            }
        }
    }
} as const;

export const $RolePasswordResponse = {
    type: 'object',
    required: ['password'],
    properties: {
        password: {
            description: `The role password
`,
            type: 'string'
        }
    }
} as const;

export const $PaymentSourceBankCard = {
    type: 'object',
    required: ['last4'],
    properties: {
        last4: {
            type: 'string',
            description: `Last 4 digits of the card.
`
        },
        brand: {
            type: 'string',
            description: `Brand of credit card.
`,
            enum: ['amex', 'diners', 'discover', 'jcb', 'mastercard', 'unionpay', 'unknown', 'visa']
        },
        exp_month: {
            type: 'integer',
            format: 'int64',
            description: `Credit card expiration month
`
        },
        exp_year: {
            type: 'integer',
            format: 'int64',
            description: `Credit card expiration year
`
        }
    }
} as const;

export const $PaymentSource = {
    type: 'object',
    required: ['type'],
    properties: {
        type: {
            type: 'string',
            description: `Type of payment source. E.g. "card".
`
        },
        card: {
            '$ref': '#/components/schemas/PaymentSourceBankCard'
        }
    }
} as const;

export const $BillingAccount = {
    type: 'object',
    required: ['payment_source', 'subscription_type', 'quota_reset_at_last', 'name', 'email', 'address_city', 'address_country', 'address_line1', 'address_line2', 'address_postal_code', 'address_state'],
    properties: {
        payment_source: {
            '$ref': '#/components/schemas/PaymentSource'
        },
        subscription_type: {
            '$ref': '#/components/schemas/BillingSubscriptionType'
        },
        quota_reset_at_last: {
            description: `The last time the quota was reset. Defaults to the date-time the account is created.
`,
            type: 'string',
            format: 'date-time'
        },
        name: {
            description: 'The full name of the individual or entity that owns the billing account. This name appears on invoices.',
            type: 'string'
        },
        email: {
            description: `Billing email, to receive emails related to invoices and subscriptions.
`,
            type: 'string'
        },
        address_city: {
            description: `Billing address city.
`,
            type: 'string'
        },
        address_country: {
            description: `Billing address country code defined by ISO 3166-1 alpha-2.
`,
            type: 'string'
        },
        address_country_name: {
            description: `Billing address country name.
`,
            type: 'string'
        },
        address_line1: {
            description: `Billing address line 1.
`,
            type: 'string'
        },
        address_line2: {
            description: `Billing address line 2.
`,
            type: 'string'
        },
        address_postal_code: {
            description: `Billing address postal code.
`,
            type: 'string'
        },
        address_state: {
            description: `Billing address state or region.
`,
            type: 'string'
        },
        orb_portal_url: {
            description: `Orb user portal url
`,
            type: 'string'
        },
        tax_id: {
            description: `The tax identification number for the billing account, displayed on invoices.
`,
            type: 'string'
        },
        tax_id_type: {
            description: `The type of the tax identification number based on the country.
`,
            type: 'string'
        }
    }
} as const;

export const $BillingSubscriptionType = {
    type: 'string',
    description: `Type of subscription to Neon Cloud.
Notice that for users without billing account this will be "UNKNOWN"
`,
    enum: ['UNKNOWN', 'direct_sales', 'aws_marketplace', 'free_v2', 'launch', 'scale']
} as const;

export const $Database = {
    type: 'object',
    required: ['id', 'branch_id', 'name', 'owner_name', 'created_at', 'updated_at'],
    properties: {
        id: {
            description: `The database ID
`,
            type: 'integer',
            format: 'int64'
        },
        branch_id: {
            description: `The ID of the branch to which the database belongs
`,
            type: 'string'
        },
        name: {
            description: `The database name
`,
            type: 'string'
        },
        owner_name: {
            description: `The name of role that owns the database
`,
            type: 'string'
        },
        created_at: {
            description: `A timestamp indicating when the database was created
`,
            type: 'string',
            format: 'date-time'
        },
        updated_at: {
            description: `A timestamp indicating when the database was last updated
`,
            type: 'string',
            format: 'date-time'
        }
    },
    example: {
        id: 834686,
        branch_id: 'br-wispy-meadow-118737',
        name: 'neondb',
        owner_name: 'casey',
        created_at: '2022-11-30T18:25:15Z',
        updated_at: '2022-11-30T18:25:15Z'
    }
} as const;

export const $DatabaseCreateRequest = {
    type: 'object',
    required: ['database'],
    properties: {
        database: {
            type: 'object',
            required: ['name', 'owner_name'],
            properties: {
                name: {
                    description: `The name of the datbase
`,
                    type: 'string'
                },
                owner_name: {
                    description: `The name of the role that owns the database
`,
                    type: 'string'
                }
            }
        }
    }
} as const;

export const $DatabaseUpdateRequest = {
    type: 'object',
    required: ['database'],
    properties: {
        database: {
            type: 'object',
            properties: {
                name: {
                    description: `The name of the database
`,
                    type: 'string'
                },
                owner_name: {
                    description: `The name of the role that owns the database
`,
                    type: 'string'
                }
            }
        }
    }
} as const;

export const $DatabaseResponse = {
    type: 'object',
    required: ['database'],
    properties: {
        database: {
            '$ref': '#/components/schemas/Database'
        }
    }
} as const;

export const $DatabasesResponse = {
    type: 'object',
    required: ['databases'],
    properties: {
        databases: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Database'
            }
        }
    }
} as const;

export const $Invitation = {
    type: 'object',
    required: ['id', 'email', 'org_id', 'invited_by', 'invited_at', 'role'],
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        email: {
            description: 'Email of the invited user',
            type: 'string',
            format: 'email'
        },
        org_id: {
            description: 'Organization id as it is stored in Neon',
            type: 'string'
        },
        invited_by: {
            description: 'UUID for the user_id who extended the invitation',
            type: 'string',
            format: 'uuid'
        },
        invited_at: {
            description: 'Timestamp when the invitation was created',
            type: 'string',
            format: 'date-time'
        },
        role: {
            '$ref': '#/components/schemas/MemberRole'
        }
    }
} as const;

export const $MemberRole = {
    description: 'The role of the organization member',
    type: 'string',
    enum: ['admin', 'member']
} as const;

export const $Member = {
    type: 'object',
    required: ['id', 'user_id', 'org_id', 'role'],
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        user_id: {
            type: 'string',
            format: 'uuid'
        },
        org_id: {
            type: 'string'
        },
        role: {
            '$ref': '#/components/schemas/MemberRole'
        },
        joined_at: {
            type: 'string',
            format: 'date-time'
        }
    }
} as const;

export const $MemberUserInfo = {
    type: 'object',
    required: ['email', 'name', 'last_name'],
    properties: {
        email: {
            type: 'string'
        },
        name: {
            type: 'string'
        },
        last_name: {
            type: 'string'
        }
    }
} as const;

export const $MemberWithUser = {
    type: 'object',
    required: ['member', 'user'],
    properties: {
        member: {
            '$ref': '#/components/schemas/Member'
        },
        user: {
            '$ref': '#/components/schemas/MemberUserInfo'
        }
    }
} as const;

export const $Organization = {
    type: 'object',
    required: ['id', 'name', 'handle', 'created_at', 'updated_at'],
    properties: {
        id: {
            type: 'string'
        },
        name: {
            type: 'string'
        },
        handle: {
            type: 'string'
        },
        created_at: {
            description: `A timestamp indicting when the organization was created
`,
            type: 'string',
            format: 'date-time'
        },
        updated_at: {
            description: `A timestamp indicating when the organization was updated
`,
            type: 'string',
            format: 'date-time'
        }
    }
} as const;

export const $OrganizationsResponse = {
    type: 'object',
    required: ['organizations'],
    properties: {
        organizations: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Organization'
            }
        }
    }
} as const;

export const $OrganizationsUpdateRequest = {
    type: 'object',
    required: ['name'],
    properties: {
        name: {
            type: 'string'
        }
    }
} as const;

export const $OrganizationInvitationsResponse = {
    type: 'object',
    required: ['invitations'],
    properties: {
        invitations: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Invitation'
            }
        }
    }
} as const;

export const $OrganizationInviteCreateRequest = {
    type: 'object',
    required: ['email', 'role'],
    properties: {
        email: {
            type: 'string',
            format: 'email'
        },
        role: {
            '$ref': '#/components/schemas/MemberRole'
        }
    }
} as const;

export const $OrganizationInvitesCreateRequest = {
    type: 'object',
    required: ['invitations'],
    properties: {
        invitations: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/OrganizationInviteCreateRequest'
            }
        }
    }
} as const;

export const $OrganizationInviteUpdateRequest = {
    type: 'object',
    properties: {
        email: {
            type: 'string',
            format: 'email'
        },
        role: {
            '$ref': '#/components/schemas/MemberRole'
        },
        resend: {
            type: 'boolean'
        }
    }
} as const;

export const $OrganizationGuestsResponse = {
    description: `A list of details for guests of an organisation
`,
    type: 'array',
    items: {
        '$ref': '#/components/schemas/OrganizationGuest'
    }
} as const;

export const $OrganizationGuest = {
    description: `Details of an organisation guest, who is not directly a member of
an organisation but has been shared one of the projects it owns
`,
    type: 'object',
    required: ['permission_id', 'user_email', 'project_id', 'project_name'],
    properties: {
        permission_id: {
            type: 'string'
        },
        user_email: {
            type: 'string'
        },
        project_id: {
            type: 'string'
        },
        project_name: {
            type: 'string'
        }
    }
} as const;

export const $OrganizationMemberUpdateRequest = {
    type: 'object',
    required: ['role'],
    properties: {
        role: {
            '$ref': '#/components/schemas/MemberRole'
        }
    }
} as const;

export const $OrganizationMembersResponse = {
    type: 'object',
    required: ['members'],
    properties: {
        members: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/MemberWithUser'
            }
        }
    }
} as const;

export const $InvitationCreateRequest = {
    type: 'object',
    required: ['email', 'role'],
    properties: {
        email: {
            description: 'Email to invite',
            type: 'string'
        },
        role: {
            '$ref': '#/components/schemas/MemberRole'
        }
    }
} as const;

export const $OrganizationCreateRequest = {
    type: 'object',
    required: ['organization', 'subscription_type'],
    properties: {
        organization: {
            type: 'object',
            properties: {
                name: {
                    description: 'The organization name',
                    type: 'string'
                },
                invitations: {
                    description: 'Emails with roles to invite to the organization',
                    type: 'array',
                    items: {
                        '$ref': '#/components/schemas/InvitationCreateRequest'
                    }
                }
            }
        },
        subscription_type: {
            '$ref': '#/components/schemas/BillingSubscriptionType'
        }
    }
} as const;

export const $OrganizationLimits = {
    type: 'object',
    required: ['limits', 'features'],
    properties: {
        limits: {
            type: 'object',
            required: ['active_time', 'max_projects', 'max_branches', 'max_autoscaling_cu', 'cpu_seconds', 'max_active_endpoints', 'max_read_only_endpoints', 'max_allowed_ips', 'max_monitoring_retention_hours', 'max_history_retention_seconds', 'max_compute_time_non_primary', 'min_autosuspend_seconds'],
            properties: {
                active_time: {
                    type: 'integer',
                    format: 'int64'
                },
                max_projects: {
                    type: 'integer'
                },
                max_branches: {
                    type: 'integer'
                },
                max_autoscaling_cu: {
                    type: 'number',
                    format: 'float64'
                },
                cpu_seconds: {
                    type: 'integer',
                    format: 'int64'
                },
                max_active_endpoints: {
                    type: 'integer'
                },
                max_read_only_endpoints: {
                    type: 'integer'
                },
                max_allowed_ips: {
                    type: 'integer'
                },
                max_monitoring_retention_hours: {
                    type: 'integer'
                },
                max_history_retention_seconds: {
                    type: 'integer',
                    format: 'int32'
                },
                max_compute_time_non_primary: {
                    type: 'integer',
                    format: 'int64'
                },
                min_autosuspend_seconds: {
                    type: 'integer'
                }
            }
        },
        features: {
            '$ref': '#/components/schemas/Features'
        }
    }
} as const;

export const $CurrentUserAuthAccount = {
    type: 'object',
    required: ['provider', 'email', 'name', 'login', 'image'],
    properties: {
        email: {
            type: 'string'
        },
        image: {
            type: 'string'
        },
        login: {
            type: 'string'
        },
        name: {
            type: 'string'
        },
        provider: {
            '$ref': '#/components/schemas/IdentityProviderId'
        }
    }
} as const;

export const $LinkedAuthAccount = {
    type: 'object',
    required: ['provider', 'provider_display_name', 'username'],
    properties: {
        provider: {
            '$ref': '#/components/schemas/IdentityProviderId'
        },
        provider_display_name: {
            type: 'string'
        },
        username: {
            type: 'string'
        }
    }
} as const;

export const $UpdateUserInfoRequest = {
    type: 'object',
    required: ['id'],
    properties: {
        email: {
            type: 'string'
        },
        id: {
            type: 'string',
            format: 'uuid'
        },
        image: {
            type: 'string'
        },
        first_name: {
            type: 'string'
        },
        last_name: {
            type: 'string'
        },
        password: {
            type: 'string'
        },
        new_password: {
            type: 'string'
        }
    }
} as const;

export const $CurrentUserInfoResponse = {
    type: 'object',
    required: ['active_seconds_limit', 'billing_account', 'id', 'email', 'login', 'name', 'last_name', 'image', 'projects_limit', 'branches_limit', 'max_autoscaling_limit', 'auth_accounts', 'plan'],
    properties: {
        active_seconds_limit: {
            description: `Control plane observes active endpoints of a user this amount of wall-clock time.
`,
            type: 'integer',
            format: 'int64'
        },
        billing_account: {
            '$ref': '#/components/schemas/BillingAccount'
        },
        auth_accounts: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CurrentUserAuthAccount'
            }
        },
        email: {
            type: 'string'
        },
        id: {
            type: 'string'
        },
        image: {
            type: 'string'
        },
        login: {
            type: 'string'
        },
        name: {
            type: 'string'
        },
        last_name: {
            type: 'string'
        },
        projects_limit: {
            type: 'integer',
            format: 'int64'
        },
        branches_limit: {
            type: 'integer',
            format: 'int64'
        },
        max_autoscaling_limit: {
            '$ref': '#/components/schemas/ComputeUnit'
        },
        compute_seconds_limit: {
            type: 'integer',
            format: 'int64'
        },
        plan: {
            type: 'string'
        }
    }
} as const;

export const $CurrentUserInfoAuthResponse = {
    type: 'object',
    required: ['password_stored', 'auth_accounts', 'linked_accounts'],
    properties: {
        password_stored: {
            type: 'boolean'
        },
        auth_accounts: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CurrentUserAuthAccount'
            }
        },
        linked_accounts: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/LinkedAuthAccount'
            }
        }
    }
} as const;

export const $VerifyUserPasswordRequest = {
    type: 'object',
    required: ['password'],
    properties: {
        password: {
            type: 'string'
        }
    }
} as const;

export const $IdentityProviderId = {
    description: 'Identity provider id from keycloak',
    type: 'string',
    enum: ['github', 'google', 'hasura', 'keycloak']
} as const;

export const $EndpointSettingsData = {
    type: 'object',
    description: 'A collection of settings for a compute endpoint',
    properties: {
        pg_settings: {
            '$ref': '#/components/schemas/PgSettingsData'
        },
        pgbouncer_settings: {
            '$ref': '#/components/schemas/PgbouncerSettingsData'
        }
    }
} as const;

export const $ProjectQuota = {
    type: 'object',
    description: `Per-project consumption quota. If the quota is exceeded, all active computes
are automatically suspended and it will not be possible to start them with
an API method call or incoming proxy connections. The only exception is
\`logical_size_bytes\`, which is applied on per-branch basis, i.e., only the
compute on the branch that exceeds the \`logical_size\` quota will be suspended.

Quotas are enforced based on per-project consumption metrics with the same names,
which are reset at the end of each billing period (the first day of the month).
Logical size is also an exception in this case, as it represents the total size
of data stored in a branch, so it is not reset.

A zero or empty quota value means 'unlimited'.
`,
    properties: {
        active_time_seconds: {
            description: `The total amount of wall-clock time allowed to be spent by the project's compute endpoints.
`,
            type: 'integer',
            format: 'int64',
            minimum: 0
        },
        compute_time_seconds: {
            description: `The total amount of CPU seconds allowed to be spent by the project's compute endpoints.
`,
            type: 'integer',
            format: 'int64',
            minimum: 0
        },
        written_data_bytes: {
            description: `Total amount of data written to all of a project's branches.
`,
            type: 'integer',
            format: 'int64',
            minimum: 0
        },
        data_transfer_bytes: {
            description: `Total amount of data transferred from all of a project's branches using the proxy.
`,
            type: 'integer',
            format: 'int64',
            minimum: 0
        },
        logical_size_bytes: {
            description: `Limit on the logical size of every project's branch.
`,
            type: 'integer',
            format: 'int64',
            minimum: 0
        }
    }
} as const;

export const $DefaultEndpointSettings = {
    type: 'object',
    description: 'A collection of settings for a Neon endpoint',
    properties: {
        pg_settings: {
            '$ref': '#/components/schemas/PgSettingsData'
        },
        pgbouncer_settings: {
            '$ref': '#/components/schemas/PgbouncerSettingsData'
        },
        autoscaling_limit_min_cu: {
            description: `The minimum number of Compute Units. The minimum value is \`0.25\`.
See [Compute size and Autoscaling configuration](https://neon.tech/docs/manage/endpoints#compute-size-and-autoscaling-configuration)
for more information.
`,
            '$ref': '#/components/schemas/ComputeUnit'
        },
        autoscaling_limit_max_cu: {
            description: `The maximum number of Compute Units. See [Compute size and Autoscaling configuration](https://neon.tech/docs/manage/endpoints#compute-size-and-autoscaling-configuration)
for more information.
`,
            '$ref': '#/components/schemas/ComputeUnit'
        },
        suspend_timeout_seconds: {
            '$ref': '#/components/schemas/SuspendTimeoutSeconds'
        }
    },
    additionalProperties: {
        type: 'string'
    }
} as const;

export const $PgSettingsData = {
    description: 'A raw representation of Postgres settings',
    type: 'object',
    additionalProperties: {
        type: 'string'
    }
} as const;

export const $PgbouncerSettingsData = {
    description: 'A raw representation of PgBouncer settings',
    type: 'object',
    additionalProperties: {
        type: 'string'
    }
} as const;

export const $PgVersion = {
    description: 'The major Postgres version number. Currently supported versions are `14`, `15`, and `16`.',
    type: 'integer',
    minimum: 14,
    maximum: 16,
    default: 16
} as const;

export const $HealthCheck = {
    type: 'object',
    required: ['status'],
    properties: {
        status: {
            description: 'Service status',
            type: 'string'
        }
    },
    example: {
        status: 'ok'
    }
} as const;

export const $ProjectOwnerData = {
    type: 'object',
    required: ['email', 'branches_limit', 'subscription_type'],
    properties: {
        email: {
            type: 'string'
        },
        branches_limit: {
            type: 'integer'
        },
        subscription_type: {
            '$ref': '#/components/schemas/BillingSubscriptionType'
        }
    }
} as const;

export const $GeneralError = {
    type: 'object',
    description: 'General Error',
    required: ['message', 'code'],
    properties: {
        code: {
            '$ref': '#/components/schemas/ErrorCode'
        },
        message: {
            description: 'Error message',
            type: 'string'
        }
    }
} as const;

export const $ErrorCode = {
    type: 'string'
} as const;

export const $BranchOperations = {
    allOf: [
        {
            '$ref': '#/components/schemas/BranchResponse'
        },
        {
            '$ref': '#/components/schemas/OperationsResponse'
        }
    ]
} as const;

export const $EndpointOperations = {
    allOf: [
        {
            '$ref': '#/components/schemas/EndpointResponse'
        },
        {
            '$ref': '#/components/schemas/OperationsResponse'
        }
    ]
} as const;

export const $DatabaseOperations = {
    allOf: [
        {
            '$ref': '#/components/schemas/DatabaseResponse'
        },
        {
            '$ref': '#/components/schemas/OperationsResponse'
        }
    ]
} as const;

export const $RoleOperations = {
    allOf: [
        {
            '$ref': '#/components/schemas/RoleResponse'
        },
        {
            '$ref': '#/components/schemas/OperationsResponse'
        }
    ]
} as const;

export const $SupportTicketSeverity = {
    type: 'string',
    enum: ['low', 'normal', 'high', 'critical']
} as const;